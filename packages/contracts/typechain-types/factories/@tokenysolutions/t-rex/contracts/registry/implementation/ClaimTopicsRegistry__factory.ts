/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  ClaimTopicsRegistry,
  ClaimTopicsRegistryInterface,
} from "../../../../../../@tokenysolutions/t-rex/contracts/registry/implementation/ClaimTopicsRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "claimTopic",
        type: "uint256",
      },
    ],
    name: "ClaimTopicAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "claimTopic",
        type: "uint256",
      },
    ],
    name: "ClaimTopicRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_claimTopic",
        type: "uint256",
      },
    ],
    name: "addClaimTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getClaimTopics",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_claimTopic",
        type: "uint256",
      },
    ],
    name: "removeClaimTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506107af806100206000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c80630829784614610072578063715018a6146100875780638da5cb5b1461008f578063c7b22551146100af578063df09d604146100c2578063e1c7392a146100d7578063f2fde38b146100df575b600080fd5b61008561008036600461062d565b6100f2565b005b6100856101e3565b6033546040516001600160a01b0390911681526020015b60405180910390f35b6100856100bd36600461062d565b6101f7565b6100ca610348565b6040516100a69190610646565b6100856103a0565b6100856100ed36600461068a565b6104b1565b6100fa610527565b60655460005b818110156101de57826065828154811061011c5761011c6106ba565b9060005260206000200154036101cc5760656101396001846106e6565b81548110610149576101496106ba565b906000526020600020015460658281548110610167576101676106ba565b6000918252602090912001556065805480610184576101846106ff565b60019003818190600052602060002001600090559055827f0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec560405160405180910390a2505050565b806101d681610715565b915050610100565b505050565b6101eb610527565b6101f56000610581565b565b6101ff610527565b606554600f81106102625760405162461bcd60e51b815260206004820152602260248201527f63616e6e6f742072657175697265206d6f7265207468616e20313520746f7069604482015261637360f01b60648201526084015b60405180910390fd5b60005b818110156102e7578260658281548110610281576102816106ba565b9060005260206000200154036102d55760405162461bcd60e51b8152602060048201526019602482015278636c61696d546f70696320616c72656164792065786973747360381b6044820152606401610259565b806102df81610715565b915050610265565b506065805460018101825560009182527f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c70183905560405183917f01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d691a25050565b6060606580548060200260200160405190810160405280929190818152602001828054801561039657602002820191906000526020600020905b815481526020019060010190808311610382575b5050505050905090565b600054610100900460ff16158080156103c05750600054600160ff909116105b806103da5750303b1580156103da575060005460ff166001145b61043d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610259565b6000805460ff191660011790558015610460576000805461ff0019166101001790555b6104686105d3565b80156104ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6104b9610527565b6001600160a01b03811661051e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610259565b6104ae81610581565b6033546001600160a01b031633146101f55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610259565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166105fa5760405162461bcd60e51b81526004016102599061072e565b6101f5600054610100900460ff166106245760405162461bcd60e51b81526004016102599061072e565b6101f533610581565b60006020828403121561063f57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561067e57835183529284019291840191600101610662565b50909695505050505050565b60006020828403121561069c57600080fd5b81356001600160a01b03811681146106b357600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156106f9576106f96106d0565b92915050565b634e487b7160e01b600052603160045260246000fd5b600060018201610727576107276106d0565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212205cd86133f8e6bd2440c229e0a238e30449b61f61a36db6e18837ef0b0d1f788664736f6c63430008110033";

type ClaimTopicsRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClaimTopicsRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClaimTopicsRegistry__factory extends ContractFactory {
  constructor(...args: ClaimTopicsRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ClaimTopicsRegistry> {
    return super.deploy(overrides || {}) as Promise<ClaimTopicsRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ClaimTopicsRegistry {
    return super.attach(address) as ClaimTopicsRegistry;
  }
  override connect(signer: Signer): ClaimTopicsRegistry__factory {
    return super.connect(signer) as ClaimTopicsRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClaimTopicsRegistryInterface {
    return new utils.Interface(_abi) as ClaimTopicsRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimTopicsRegistry {
    return new Contract(address, _abi, signerOrProvider) as ClaimTopicsRegistry;
  }
}
