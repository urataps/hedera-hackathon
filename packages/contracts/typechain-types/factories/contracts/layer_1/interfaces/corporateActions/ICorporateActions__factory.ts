/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICorporateActions,
  ICorporateActionsInterface,
} from "../../../../../contracts/layer_1/interfaces/corporateActions/ICorporateActions";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "actionType",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "DuplicatedCorporateAction",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "actionType",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "corporateActionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "corporateActionIndexByType",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "CorporateActionAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_actionType",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "addCorporateAction",
    outputs: [
      {
        internalType: "bool",
        name: "success_",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "corporateActionId_",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "corporateActionIndexByType_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_corporateActionId",
        type: "bytes32",
      },
    ],
    name: "getCorporateAction",
    outputs: [
      {
        internalType: "bytes32",
        name: "actionType_",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data_",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCorporateActionCount",
    outputs: [
      {
        internalType: "uint256",
        name: "corporateActionCount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_actionType",
        type: "bytes32",
      },
    ],
    name: "getCorporateActionCountByType",
    outputs: [
      {
        internalType: "uint256",
        name: "corporateActionCount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pageIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pageLength",
        type: "uint256",
      },
    ],
    name: "getCorporateActionIds",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "corporateActionIds_",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_actionType",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_pageIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pageLength",
        type: "uint256",
      },
    ],
    name: "getCorporateActionIdsByType",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "corporateActionIds_",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ICorporateActions__factory {
  static readonly abi = _abi;
  static createInterface(): ICorporateActionsInterface {
    return new utils.Interface(_abi) as ICorporateActionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICorporateActions {
    return new Contract(address, _abi, signerOrProvider) as ICorporateActions;
  }
}
