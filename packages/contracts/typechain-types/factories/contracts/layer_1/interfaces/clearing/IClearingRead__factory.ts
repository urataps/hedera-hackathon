/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IClearingRead,
  IClearingReadInterface,
} from "../../../../../contracts/layer_1/interfaces/clearing/IClearingRead";

const _abi = [
  {
    inputs: [],
    name: "ClearingIsActivated",
    type: "error",
  },
  {
    inputs: [],
    name: "ClearingIsDisabled",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpirationDateNotReached",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpirationDateReached",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongClearingId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
    ],
    name: "getClearedAmountFor",
    outputs: [
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_partition",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
    ],
    name: "getClearedAmountForByPartition",
    outputs: [
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_partition",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
      {
        internalType: "enum IClearing.ClearingOperationType",
        name: "_clearingOperationType",
        type: "uint8",
      },
    ],
    name: "getClearingCountForByPartition",
    outputs: [
      {
        internalType: "uint256",
        name: "clearingCount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_partition",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
      {
        internalType: "enum IClearing.ClearingOperationType",
        name: "_clearingOperationType",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "clearingId_",
        type: "uint256",
      },
    ],
    name: "getClearingThirdParty",
    outputs: [
      {
        internalType: "address",
        name: "thirdParty_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_partition",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
      {
        internalType: "enum IClearing.ClearingOperationType",
        name: "_clearingOperationType",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_pageIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pageLength",
        type: "uint256",
      },
    ],
    name: "getClearingsIdForByPartition",
    outputs: [
      {
        internalType: "uint256[]",
        name: "clearingsId_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IClearingRead__factory {
  static readonly abi = _abi;
  static createInterface(): IClearingReadInterface {
    return new utils.Interface(_abi) as IClearingReadInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IClearingRead {
    return new Contract(address, _abi, signerOrProvider) as IClearingRead;
  }
}
