/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ISnapshotsStorageWrapper,
  ISnapshotsStorageWrapperInterface,
} from "../../../../../contracts/layer_1/interfaces/snapshots/ISnapshotsStorageWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "snapshotId",
        type: "uint256",
      },
    ],
    name: "SnapshotIdDoesNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "SnapshotIdNull",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "snapshotID",
        type: "uint256",
      },
    ],
    name: "SnapshotTaken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "snapshotId",
        type: "uint256",
      },
    ],
    name: "SnapshotTriggered",
    type: "event",
  },
] as const;

export class ISnapshotsStorageWrapper__factory {
  static readonly abi = _abi;
  static createInterface(): ISnapshotsStorageWrapperInterface {
    return new utils.Interface(_abi) as ISnapshotsStorageWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISnapshotsStorageWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ISnapshotsStorageWrapper;
  }
}
