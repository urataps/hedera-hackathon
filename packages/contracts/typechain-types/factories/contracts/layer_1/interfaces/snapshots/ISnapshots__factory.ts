/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ISnapshots,
  ISnapshotsInterface,
} from "../../../../../contracts/layer_1/interfaces/snapshots/ISnapshots";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "snapshotId",
        type: "uint256",
      },
    ],
    name: "SnapshotIdDoesNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "SnapshotIdNull",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "snapshotID",
        type: "uint256",
      },
    ],
    name: "SnapshotTaken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "snapshotId",
        type: "uint256",
      },
    ],
    name: "SnapshotTriggered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_snapshotID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
    ],
    name: "balanceOfAtSnapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "balance_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_partition",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_snapshotID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
    ],
    name: "balanceOfAtSnapshotByPartition",
    outputs: [
      {
        internalType: "uint256",
        name: "balance_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_snapshotID",
        type: "uint256",
      },
    ],
    name: "decimalsAtSnapshot",
    outputs: [
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_snapshotID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pageIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pageLength",
        type: "uint256",
      },
    ],
    name: "getTokenHoldersAtSnapshot",
    outputs: [
      {
        internalType: "address[]",
        name: "holders_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_snapshotID",
        type: "uint256",
      },
    ],
    name: "getTotalTokenHoldersAtSnapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_snapshotID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
    ],
    name: "lockedBalanceOfAtSnapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "balance_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_partition",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_snapshotID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
    ],
    name: "lockedBalanceOfAtSnapshotByPartition",
    outputs: [
      {
        internalType: "uint256",
        name: "balance_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_snapshotID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
    ],
    name: "partitionsOfAtSnapshot",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "takeSnapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "snapshotID_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_snapshotID",
        type: "uint256",
      },
    ],
    name: "totalSupplyAtSnapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "totalSupply_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_partition",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_snapshotID",
        type: "uint256",
      },
    ],
    name: "totalSupplyAtSnapshotByPartition",
    outputs: [
      {
        internalType: "uint256",
        name: "totalSupply_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ISnapshots__factory {
  static readonly abi = _abi;
  static createInterface(): ISnapshotsInterface {
    return new utils.Interface(_abi) as ISnapshotsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISnapshots {
    return new Contract(address, _abi, signerOrProvider) as ISnapshots;
  }
}
