/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IERC1594StorageWrapper,
  IERC1594StorageWrapperInterface,
} from "../../../../../contracts/layer_1/interfaces/ERC1400/IERC1594StorageWrapper";

const _abi = [
  {
    inputs: [],
    name: "IssuanceIsClosed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "Issued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "Redeemed",
    type: "event",
  },
] as const;

export class IERC1594StorageWrapper__factory {
  static readonly abi = _abi;
  static createInterface(): IERC1594StorageWrapperInterface {
    return new utils.Interface(_abi) as IERC1594StorageWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IERC1594StorageWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IERC1594StorageWrapper;
  }
}
