/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockedWhitelist,
  MockedWhitelistInterface,
} from "../../../../contracts/mocks/MockedExternalWhitelist.sol/MockedWhitelist";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddedToWhitelist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "RemovedFromWhitelist",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "addToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "removeFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638ab1d68114610046578063e43252d71461005b578063fe9fbb801461006e575b600080fd5b610059610054366004610143565b6100ae565b005b610059610069366004610143565b6100f7565b61009a61007c366004610143565b6001600160a01b031660009081526020819052604090205460ff1690565b604051901515815260200160405180910390f35b6001600160a01b038116600081815260208190526040808220805460ff19169055517fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7579190a250565b6001600160a01b038116600081815260208190526040808220805460ff19166001179055517fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab039190a250565b60006020828403121561015557600080fd5b81356001600160a01b038116811461016c57600080fd5b939250505056fea2646970667358221220a1b1a3688316eaf7998be6ee7a2973576b68a6565531ea66f4d1cce498eacff764736f6c63430008120033";

type MockedWhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockedWhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockedWhitelist__factory extends ContractFactory {
  constructor(...args: MockedWhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockedWhitelist> {
    return super.deploy(overrides || {}) as Promise<MockedWhitelist>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockedWhitelist {
    return super.attach(address) as MockedWhitelist;
  }
  override connect(signer: Signer): MockedWhitelist__factory {
    return super.connect(signer) as MockedWhitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockedWhitelistInterface {
    return new utils.Interface(_abi) as MockedWhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockedWhitelist {
    return new Contract(address, _abi, signerOrProvider) as MockedWhitelist;
  }
}
