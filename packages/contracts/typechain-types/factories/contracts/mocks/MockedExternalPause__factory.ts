/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockedExternalPause,
  MockedExternalPauseInterface,
} from "../../../contracts/mocks/MockedExternalPause";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "isPaused",
        type: "bool",
      },
    ],
    name: "PausedStateChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "isPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "paused",
        type: "bool",
      },
    ],
    name: "setPaused",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610106806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806316c38b3c146037578063b187bd26146048575b600080fd5b6046604236600460a9565b6062565b005b60005460ff16604051901515815260200160405180910390f35b6000805460ff19168215159081179091556040519081527f9e3a5e37224532dea67b89face185703738a228a6e8a23dee546960180d3be649060200160405180910390a150565b60006020828403121560ba57600080fd5b8135801515811460c957600080fd5b939250505056fea26469706673582212208c171e3820ebc8bce22111282fe3dd853c403b119c6bb1a4f0113b667e1fbf4864736f6c63430008120033";

type MockedExternalPauseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockedExternalPauseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockedExternalPause__factory extends ContractFactory {
  constructor(...args: MockedExternalPauseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockedExternalPause> {
    return super.deploy(overrides || {}) as Promise<MockedExternalPause>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockedExternalPause {
    return super.attach(address) as MockedExternalPause;
  }
  override connect(signer: Signer): MockedExternalPause__factory {
    return super.connect(signer) as MockedExternalPause__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockedExternalPauseInterface {
    return new utils.Interface(_abi) as MockedExternalPauseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockedExternalPause {
    return new Contract(address, _abi, signerOrProvider) as MockedExternalPause;
  }
}
