/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  BusinessLogicResolverWrapper,
  BusinessLogicResolverWrapperInterface,
} from "../../../contracts/resolver/BusinessLogicResolverWrapper";

const _abi = [
  {
    inputs: [],
    name: "AllBusinessLogicKeysMustBeenInformed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "businessLogicKey",
        type: "bytes32",
      },
    ],
    name: "BusinessLogicKeyDuplicated",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "businessLogicKey",
        type: "bytes32",
      },
    ],
    name: "BusinessLogicNotActive",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    name: "BusinessLogicVersionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroKeyNotValidForBusinessLogic",
    type: "error",
  },
] as const;

export class BusinessLogicResolverWrapper__factory {
  static readonly abi = _abi;
  static createInterface(): BusinessLogicResolverWrapperInterface {
    return new utils.Interface(_abi) as BusinessLogicResolverWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BusinessLogicResolverWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BusinessLogicResolverWrapper;
  }
}
