/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  TREXBaseDeploymentLib,
  TREXBaseDeploymentLibInterface,
} from "../../../../../../contracts/factory/ERC3643/libraries/core/TREXBaseDeploymentLib";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "Deployed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_ir",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_irs",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_tir",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_ctr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_mc",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "_salt",
        type: "string",
      },
    ],
    name: "TREXSuiteDeployed",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220590dafc88ad1af7f9af307b2b880d6442a36022a6694e94bdafb3a455ce8a5fa64736f6c63430008110033";

type TREXBaseDeploymentLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TREXBaseDeploymentLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TREXBaseDeploymentLib__factory extends ContractFactory {
  constructor(...args: TREXBaseDeploymentLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TREXBaseDeploymentLib> {
    return super.deploy(overrides || {}) as Promise<TREXBaseDeploymentLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TREXBaseDeploymentLib {
    return super.attach(address) as TREXBaseDeploymentLib;
  }
  override connect(signer: Signer): TREXBaseDeploymentLib__factory {
    return super.connect(signer) as TREXBaseDeploymentLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TREXBaseDeploymentLibInterface {
    return new utils.Interface(_abi) as TREXBaseDeploymentLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TREXBaseDeploymentLib {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TREXBaseDeploymentLib;
  }
}
