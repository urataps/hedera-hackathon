/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ITransferAndLockStorageWrapper,
  ITransferAndLockStorageWrapperInterface,
} from "../../../../contracts/layer_3/interfaces/ITransferAndLockStorageWrapper";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "partition",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "expirationTimestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lockId",
        type: "uint256",
      },
    ],
    name: "PartitionTransferredAndLocked",
    type: "event",
  },
] as const;

export class ITransferAndLockStorageWrapper__factory {
  static readonly abi = _abi;
  static createInterface(): ITransferAndLockStorageWrapperInterface {
    return new utils.Interface(_abi) as ITransferAndLockStorageWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITransferAndLockStorageWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ITransferAndLockStorageWrapper;
  }
}
