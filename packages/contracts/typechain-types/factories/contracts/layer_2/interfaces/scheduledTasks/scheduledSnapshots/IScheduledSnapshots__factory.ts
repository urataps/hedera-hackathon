/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IScheduledSnapshots,
  IScheduledSnapshotsInterface,
} from "../../../../../../contracts/layer_2/interfaces/scheduledTasks/scheduledSnapshots/IScheduledSnapshots";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pageIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pageLength",
        type: "uint256",
      },
    ],
    name: "getScheduledSnapshots",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "scheduledTimestamp",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct ScheduledTasksLib.ScheduledTask[]",
        name: "scheduledSnapshot_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pos",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_scheduledTasksLength",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "onScheduledSnapshotTriggered",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "scheduledSnapshotCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IScheduledSnapshots__factory {
  static readonly abi = _abi;
  static createInterface(): IScheduledSnapshotsInterface {
    return new utils.Interface(_abi) as IScheduledSnapshotsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IScheduledSnapshots {
    return new Contract(address, _abi, signerOrProvider) as IScheduledSnapshots;
  }
}
