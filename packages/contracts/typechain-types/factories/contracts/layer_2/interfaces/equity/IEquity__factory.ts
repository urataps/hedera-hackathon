/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IEquity,
  IEquityInterface,
} from "../../../../../contracts/layer_2/interfaces/equity/IEquity";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dividendID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pageIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pageLength",
        type: "uint256",
      },
    ],
    name: "getDividendHolders",
    outputs: [
      {
        internalType: "address[]",
        name: "holders_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dividendID",
        type: "uint256",
      },
    ],
    name: "getDividends",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "recordDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "executionDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct IEquity.Dividend",
            name: "dividend",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "snapshotId",
            type: "uint256",
          },
        ],
        internalType: "struct IEquity.RegisteredDividend",
        name: "registeredDividend_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDividendsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "dividendCount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dividendID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getDividendsFor",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "recordDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "executionDate",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "recordDateReached",
            type: "bool",
          },
        ],
        internalType: "struct IEquity.DividendFor",
        name: "dividendFor_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEquityDetails",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "votingRight",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "informationRight",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "liquidationRight",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "subscriptionRight",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "conversionRight",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "redemptionRight",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "putRight",
            type: "bool",
          },
          {
            internalType: "enum IEquity.DividendType",
            name: "dividendRight",
            type: "uint8",
          },
          {
            internalType: "bytes3",
            name: "currency",
            type: "bytes3",
          },
          {
            internalType: "uint256",
            name: "nominalValue",
            type: "uint256",
          },
        ],
        internalType: "struct IEquity.EquityDetailsData",
        name: "equityDetailsData_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_balanceAdjustmentID",
        type: "uint256",
      },
    ],
    name: "getScheduledBalanceAdjustment",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "executionDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "factor",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
        ],
        internalType: "struct IEquity.ScheduledBalanceAdjustment",
        name: "balanceAdjustment_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getScheduledBalanceAdjustmentCount",
    outputs: [
      {
        internalType: "uint256",
        name: "balanceAdjustmentCount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dividendID",
        type: "uint256",
      },
    ],
    name: "getTotalDividendHolders",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_voteID",
        type: "uint256",
      },
    ],
    name: "getTotalVotingHolders",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_voteID",
        type: "uint256",
      },
    ],
    name: "getVoting",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "recordDate",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct IEquity.Voting",
            name: "voting",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "snapshotId",
            type: "uint256",
          },
        ],
        internalType: "struct IEquity.RegisteredVoting",
        name: "registeredVoting_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVotingCount",
    outputs: [
      {
        internalType: "uint256",
        name: "votingCount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_voteID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getVotingFor",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "recordDate",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "recordDateReached",
            type: "bool",
          },
        ],
        internalType: "struct IEquity.VotingFor",
        name: "votingFor_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_voteID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pageIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pageLength",
        type: "uint256",
      },
    ],
    name: "getVotingHolders",
    outputs: [
      {
        internalType: "address[]",
        name: "holders_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "recordDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "executionDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct IEquity.Dividend",
        name: "_newDividend",
        type: "tuple",
      },
    ],
    name: "setDividends",
    outputs: [
      {
        internalType: "bool",
        name: "success_",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "dividendID_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "executionDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "factor",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
        ],
        internalType: "struct IEquity.ScheduledBalanceAdjustment",
        name: "_newBalanceAdjustment",
        type: "tuple",
      },
    ],
    name: "setScheduledBalanceAdjustment",
    outputs: [
      {
        internalType: "bool",
        name: "success_",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "balanceAdjustmentID_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "recordDate",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IEquity.Voting",
        name: "_newVoting",
        type: "tuple",
      },
    ],
    name: "setVoting",
    outputs: [
      {
        internalType: "bool",
        name: "success_",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "voteID_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IEquity__factory {
  static readonly abi = _abi;
  static createInterface(): IEquityInterface {
    return new utils.Interface(_abi) as IEquityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEquity {
    return new Contract(address, _abi, signerOrProvider) as IEquity;
  }
}
