/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IBond,
  IBondInterface,
} from "../../../../../contracts/layer_2/interfaces/bond/IBond";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenHolder",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_partition",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "redeemAtMaturityByPartition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "recordDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "executionDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rate",
            type: "uint256",
          },
        ],
        internalType: "struct IBondRead.Coupon",
        name: "_newCoupon",
        type: "tuple",
      },
    ],
    name: "setCoupon",
    outputs: [
      {
        internalType: "bool",
        name: "success_",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "couponID_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maturityDate",
        type: "uint256",
      },
    ],
    name: "updateMaturityDate",
    outputs: [
      {
        internalType: "bool",
        name: "success_",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IBond__factory {
  static readonly abi = _abi;
  static createInterface(): IBondInterface {
    return new utils.Interface(_abi) as IBondInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IBond {
    return new Contract(address, _abi, signerOrProvider) as IBond;
  }
}
