/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  IdentityRegistryMock,
  IdentityRegistryMockInterface,
} from "../../../../contracts/test/identity/IdentityRegistryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "_isVerifiedFlag",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "_revertFlag",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
    ],
    name: "MockErrorVerified",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
    ],
    name: "isVerified",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_isVerifiedFlag",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "_revertFlag",
        type: "bool",
      },
    ],
    name: "setFlags",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161023538038061023583398101604081905261002f9161006b565b6000805461ffff191692151561ff001916929092176101009115159190910217905561009e565b8051801515811461006657600080fd5b919050565b6000806040838503121561007e57600080fd5b61008783610056565b915061009560208401610056565b90509250929050565b610188806100ad6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b9209e331461003b578063c1194e7e14610062575b600080fd5b61004e6100493660046100da565b610096565b604051901515815260200160405180910390f35b61009461007036600461011f565b6000805461ffff191692151561ff0019169290921761010091151591909102179055565b005b60008054610100900460ff16156100cf576040516309e996a760e21b81526001600160a01b038316600482015260240160405180910390fd5b505060005460ff1690565b6000602082840312156100ec57600080fd5b81356001600160a01b038116811461010357600080fd5b9392505050565b8035801515811461011a57600080fd5b919050565b6000806040838503121561013257600080fd5b61013b8361010a565b91506101496020840161010a565b9050925092905056fea26469706673582212206dfeaee1b9fe2db0642535d1963796261dcc63b6f33fdcee2691f7419e6eec6e64736f6c63430008120033";

type IdentityRegistryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IdentityRegistryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IdentityRegistryMock__factory extends ContractFactory {
  constructor(...args: IdentityRegistryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _isVerifiedFlag: PromiseOrValue<boolean>,
    _revertFlag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IdentityRegistryMock> {
    return super.deploy(
      _isVerifiedFlag,
      _revertFlag,
      overrides || {}
    ) as Promise<IdentityRegistryMock>;
  }
  override getDeployTransaction(
    _isVerifiedFlag: PromiseOrValue<boolean>,
    _revertFlag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _isVerifiedFlag,
      _revertFlag,
      overrides || {}
    );
  }
  override attach(address: string): IdentityRegistryMock {
    return super.attach(address) as IdentityRegistryMock;
  }
  override connect(signer: Signer): IdentityRegistryMock__factory {
    return super.connect(signer) as IdentityRegistryMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IdentityRegistryMockInterface {
    return new utils.Interface(_abi) as IdentityRegistryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IdentityRegistryMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IdentityRegistryMock;
  }
}
