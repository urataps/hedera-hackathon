/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  TimeTravelStorageWrapper,
  TimeTravelStorageWrapperInterface,
} from "../../../../../contracts/test/testTimeTravel/timeTravel/TimeTravelStorageWrapper";

const _abi = [
  {
    inputs: [],
    name: "ExpirationNotReached",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newSystemNumber",
        type: "uint256",
      },
    ],
    name: "InvalidBlocknumber",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newSystemTime",
        type: "uint256",
      },
    ],
    name: "InvalidTimestamp",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongChainId",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "legacySystemNumber",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newSystemNumber",
        type: "uint256",
      },
    ],
    name: "SystemBlocknumberChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "SystemBlocknumberReset",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "legacySystemTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newSystemTime",
        type: "uint256",
      },
    ],
    name: "SystemTimestampChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "SystemTimestampReset",
    type: "event",
  },
] as const;

export class TimeTravelStorageWrapper__factory {
  static readonly abi = _abi;
  static createInterface(): TimeTravelStorageWrapperInterface {
    return new utils.Interface(_abi) as TimeTravelStorageWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TimeTravelStorageWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TimeTravelStorageWrapper;
  }
}
