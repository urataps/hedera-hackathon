/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  Version,
  VersionInterface,
} from "../../../../../@onchain-id/solidity/contracts/version/Version";

const _abi = [
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060dd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806354fd4d5014602d575b600080fd5b6040805180820182526005815264322e322e3160d81b6020820152905160529190605b565b60405180910390f35b600060208083528351808285015260005b81811015608657858101830151858201604001528201606c565b506000604082860101526040601f19601f830116850101925050509291505056fea26469706673582212209f12647d36f50120ca41a7b3d2e9d57a943942cba3a6afc5162a32c4bf9236e064736f6c63430008110033";

type VersionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VersionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Version__factory extends ContractFactory {
  constructor(...args: VersionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Version> {
    return super.deploy(overrides || {}) as Promise<Version>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Version {
    return super.attach(address) as Version;
  }
  override connect(signer: Signer): Version__factory {
    return super.connect(signer) as Version__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VersionInterface {
    return new utils.Interface(_abi) as VersionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Version {
    return new Contract(address, _abi, signerOrProvider) as Version;
  }
}
