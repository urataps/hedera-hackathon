/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IdentityRegistryInterface extends utils.Interface {
  functions: {
    "addAgent(address)": FunctionFragment;
    "batchRegisterIdentity(address[],address[],uint16[])": FunctionFragment;
    "contains(address)": FunctionFragment;
    "deleteIdentity(address)": FunctionFragment;
    "identity(address)": FunctionFragment;
    "identityStorage()": FunctionFragment;
    "init(address,address,address)": FunctionFragment;
    "investorCountry(address)": FunctionFragment;
    "isAgent(address)": FunctionFragment;
    "isVerified(address)": FunctionFragment;
    "issuersRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "registerIdentity(address,address,uint16)": FunctionFragment;
    "removeAgent(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setClaimTopicsRegistry(address)": FunctionFragment;
    "setIdentityRegistryStorage(address)": FunctionFragment;
    "setTrustedIssuersRegistry(address)": FunctionFragment;
    "topicsRegistry()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCountry(address,uint16)": FunctionFragment;
    "updateIdentity(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAgent"
      | "batchRegisterIdentity"
      | "contains"
      | "deleteIdentity"
      | "identity"
      | "identityStorage"
      | "init"
      | "investorCountry"
      | "isAgent"
      | "isVerified"
      | "issuersRegistry"
      | "owner"
      | "registerIdentity"
      | "removeAgent"
      | "renounceOwnership"
      | "setClaimTopicsRegistry"
      | "setIdentityRegistryStorage"
      | "setTrustedIssuersRegistry"
      | "topicsRegistry"
      | "transferOwnership"
      | "updateCountry"
      | "updateIdentity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAgent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRegisterIdentity",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contains",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteIdentity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "identity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "identityStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "investorCountry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAgent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerified",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "issuersRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerIdentity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAgent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimTopicsRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIdentityRegistryStorage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedIssuersRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "topicsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCountry",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIdentity",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchRegisterIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "identity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "identityStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investorCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isVerified", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuersRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimTopicsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIdentityRegistryStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedIssuersRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topicsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIdentity",
    data: BytesLike
  ): Result;

  events: {
    "AgentAdded(address)": EventFragment;
    "AgentRemoved(address)": EventFragment;
    "ClaimTopicsRegistrySet(address)": EventFragment;
    "CountryUpdated(address,uint16)": EventFragment;
    "IdentityRegistered(address,address)": EventFragment;
    "IdentityRemoved(address,address)": EventFragment;
    "IdentityStorageSet(address)": EventFragment;
    "IdentityUpdated(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TrustedIssuersRegistrySet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimTopicsRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CountryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentityRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentityStorageSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedIssuersRegistrySet"): EventFragment;
}

export interface AgentAddedEventObject {
  _agent: string;
}
export type AgentAddedEvent = TypedEvent<[string], AgentAddedEventObject>;

export type AgentAddedEventFilter = TypedEventFilter<AgentAddedEvent>;

export interface AgentRemovedEventObject {
  _agent: string;
}
export type AgentRemovedEvent = TypedEvent<[string], AgentRemovedEventObject>;

export type AgentRemovedEventFilter = TypedEventFilter<AgentRemovedEvent>;

export interface ClaimTopicsRegistrySetEventObject {
  claimTopicsRegistry: string;
}
export type ClaimTopicsRegistrySetEvent = TypedEvent<
  [string],
  ClaimTopicsRegistrySetEventObject
>;

export type ClaimTopicsRegistrySetEventFilter =
  TypedEventFilter<ClaimTopicsRegistrySetEvent>;

export interface CountryUpdatedEventObject {
  investorAddress: string;
  country: number;
}
export type CountryUpdatedEvent = TypedEvent<
  [string, number],
  CountryUpdatedEventObject
>;

export type CountryUpdatedEventFilter = TypedEventFilter<CountryUpdatedEvent>;

export interface IdentityRegisteredEventObject {
  investorAddress: string;
  identity: string;
}
export type IdentityRegisteredEvent = TypedEvent<
  [string, string],
  IdentityRegisteredEventObject
>;

export type IdentityRegisteredEventFilter =
  TypedEventFilter<IdentityRegisteredEvent>;

export interface IdentityRemovedEventObject {
  investorAddress: string;
  identity: string;
}
export type IdentityRemovedEvent = TypedEvent<
  [string, string],
  IdentityRemovedEventObject
>;

export type IdentityRemovedEventFilter = TypedEventFilter<IdentityRemovedEvent>;

export interface IdentityStorageSetEventObject {
  identityStorage: string;
}
export type IdentityStorageSetEvent = TypedEvent<
  [string],
  IdentityStorageSetEventObject
>;

export type IdentityStorageSetEventFilter =
  TypedEventFilter<IdentityStorageSetEvent>;

export interface IdentityUpdatedEventObject {
  oldIdentity: string;
  newIdentity: string;
}
export type IdentityUpdatedEvent = TypedEvent<
  [string, string],
  IdentityUpdatedEventObject
>;

export type IdentityUpdatedEventFilter = TypedEventFilter<IdentityUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TrustedIssuersRegistrySetEventObject {
  trustedIssuersRegistry: string;
}
export type TrustedIssuersRegistrySetEvent = TypedEvent<
  [string],
  TrustedIssuersRegistrySetEventObject
>;

export type TrustedIssuersRegistrySetEventFilter =
  TypedEventFilter<TrustedIssuersRegistrySetEvent>;

export interface IdentityRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IdentityRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchRegisterIdentity(
      _userAddresses: PromiseOrValue<string>[],
      _identities: PromiseOrValue<string>[],
      _countries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contains(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deleteIdentity(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    identity(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    identityStorage(overrides?: CallOverrides): Promise<[string]>;

    init(
      _trustedIssuersRegistry: PromiseOrValue<string>,
      _claimTopicsRegistry: PromiseOrValue<string>,
      _identityStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investorCountry(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVerified(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issuersRegistry(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerIdentity(
      _userAddress: PromiseOrValue<string>,
      _identity: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimTopicsRegistry(
      _claimTopicsRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIdentityRegistryStorage(
      _identityRegistryStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedIssuersRegistry(
      _trustedIssuersRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    topicsRegistry(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCountry(
      _userAddress: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateIdentity(
      _userAddress: PromiseOrValue<string>,
      _identity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAgent(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchRegisterIdentity(
    _userAddresses: PromiseOrValue<string>[],
    _identities: PromiseOrValue<string>[],
    _countries: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contains(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deleteIdentity(
    _userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  identity(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  identityStorage(overrides?: CallOverrides): Promise<string>;

  init(
    _trustedIssuersRegistry: PromiseOrValue<string>,
    _claimTopicsRegistry: PromiseOrValue<string>,
    _identityStorage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investorCountry(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  isAgent(
    _agent: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVerified(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issuersRegistry(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerIdentity(
    _userAddress: PromiseOrValue<string>,
    _identity: PromiseOrValue<string>,
    _country: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAgent(
    _agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimTopicsRegistry(
    _claimTopicsRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIdentityRegistryStorage(
    _identityRegistryStorage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedIssuersRegistry(
    _trustedIssuersRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  topicsRegistry(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCountry(
    _userAddress: PromiseOrValue<string>,
    _country: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateIdentity(
    _userAddress: PromiseOrValue<string>,
    _identity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchRegisterIdentity(
      _userAddresses: PromiseOrValue<string>[],
      _identities: PromiseOrValue<string>[],
      _countries: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    contains(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deleteIdentity(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    identity(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    identityStorage(overrides?: CallOverrides): Promise<string>;

    init(
      _trustedIssuersRegistry: PromiseOrValue<string>,
      _claimTopicsRegistry: PromiseOrValue<string>,
      _identityStorage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    investorCountry(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    isAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVerified(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issuersRegistry(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerIdentity(
      _userAddress: PromiseOrValue<string>,
      _identity: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setClaimTopicsRegistry(
      _claimTopicsRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIdentityRegistryStorage(
      _identityRegistryStorage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedIssuersRegistry(
      _trustedIssuersRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    topicsRegistry(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCountry(
      _userAddress: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIdentity(
      _userAddress: PromiseOrValue<string>,
      _identity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AgentAdded(address)"(
      _agent?: PromiseOrValue<string> | null
    ): AgentAddedEventFilter;
    AgentAdded(_agent?: PromiseOrValue<string> | null): AgentAddedEventFilter;

    "AgentRemoved(address)"(
      _agent?: PromiseOrValue<string> | null
    ): AgentRemovedEventFilter;
    AgentRemoved(
      _agent?: PromiseOrValue<string> | null
    ): AgentRemovedEventFilter;

    "ClaimTopicsRegistrySet(address)"(
      claimTopicsRegistry?: PromiseOrValue<string> | null
    ): ClaimTopicsRegistrySetEventFilter;
    ClaimTopicsRegistrySet(
      claimTopicsRegistry?: PromiseOrValue<string> | null
    ): ClaimTopicsRegistrySetEventFilter;

    "CountryUpdated(address,uint16)"(
      investorAddress?: PromiseOrValue<string> | null,
      country?: PromiseOrValue<BigNumberish> | null
    ): CountryUpdatedEventFilter;
    CountryUpdated(
      investorAddress?: PromiseOrValue<string> | null,
      country?: PromiseOrValue<BigNumberish> | null
    ): CountryUpdatedEventFilter;

    "IdentityRegistered(address,address)"(
      investorAddress?: PromiseOrValue<string> | null,
      identity?: PromiseOrValue<string> | null
    ): IdentityRegisteredEventFilter;
    IdentityRegistered(
      investorAddress?: PromiseOrValue<string> | null,
      identity?: PromiseOrValue<string> | null
    ): IdentityRegisteredEventFilter;

    "IdentityRemoved(address,address)"(
      investorAddress?: PromiseOrValue<string> | null,
      identity?: PromiseOrValue<string> | null
    ): IdentityRemovedEventFilter;
    IdentityRemoved(
      investorAddress?: PromiseOrValue<string> | null,
      identity?: PromiseOrValue<string> | null
    ): IdentityRemovedEventFilter;

    "IdentityStorageSet(address)"(
      identityStorage?: PromiseOrValue<string> | null
    ): IdentityStorageSetEventFilter;
    IdentityStorageSet(
      identityStorage?: PromiseOrValue<string> | null
    ): IdentityStorageSetEventFilter;

    "IdentityUpdated(address,address)"(
      oldIdentity?: PromiseOrValue<string> | null,
      newIdentity?: PromiseOrValue<string> | null
    ): IdentityUpdatedEventFilter;
    IdentityUpdated(
      oldIdentity?: PromiseOrValue<string> | null,
      newIdentity?: PromiseOrValue<string> | null
    ): IdentityUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TrustedIssuersRegistrySet(address)"(
      trustedIssuersRegistry?: PromiseOrValue<string> | null
    ): TrustedIssuersRegistrySetEventFilter;
    TrustedIssuersRegistrySet(
      trustedIssuersRegistry?: PromiseOrValue<string> | null
    ): TrustedIssuersRegistrySetEventFilter;
  };

  estimateGas: {
    addAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchRegisterIdentity(
      _userAddresses: PromiseOrValue<string>[],
      _identities: PromiseOrValue<string>[],
      _countries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contains(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteIdentity(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    identity(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identityStorage(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _trustedIssuersRegistry: PromiseOrValue<string>,
      _claimTopicsRegistry: PromiseOrValue<string>,
      _identityStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investorCountry(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVerified(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuersRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerIdentity(
      _userAddress: PromiseOrValue<string>,
      _identity: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimTopicsRegistry(
      _claimTopicsRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIdentityRegistryStorage(
      _identityRegistryStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedIssuersRegistry(
      _trustedIssuersRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    topicsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCountry(
      _userAddress: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateIdentity(
      _userAddress: PromiseOrValue<string>,
      _identity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchRegisterIdentity(
      _userAddresses: PromiseOrValue<string>[],
      _identities: PromiseOrValue<string>[],
      _countries: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contains(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteIdentity(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    identity(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identityStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _trustedIssuersRegistry: PromiseOrValue<string>,
      _claimTopicsRegistry: PromiseOrValue<string>,
      _identityStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investorCountry(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVerified(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuersRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerIdentity(
      _userAddress: PromiseOrValue<string>,
      _identity: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAgent(
      _agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimTopicsRegistry(
      _claimTopicsRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIdentityRegistryStorage(
      _identityRegistryStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedIssuersRegistry(
      _trustedIssuersRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    topicsRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCountry(
      _userAddress: PromiseOrValue<string>,
      _country: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateIdentity(
      _userAddress: PromiseOrValue<string>,
      _identity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
