/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IERC3643ReadInterface extends utils.Interface {
  functions: {
    "compliance()": FunctionFragment;
    "identityRegistry()": FunctionFragment;
    "isAddressRecovered(address)": FunctionFragment;
    "isAgent(address)": FunctionFragment;
    "onchainID()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "compliance"
      | "identityRegistry"
      | "isAddressRecovered"
      | "isAgent"
      | "onchainID"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "compliance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "identityRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressRecovered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAgent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "onchainID", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "compliance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "identityRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAddressRecovered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onchainID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface IERC3643Read extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC3643ReadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    compliance(overrides?: CallOverrides): Promise<[string]>;

    identityRegistry(overrides?: CallOverrides): Promise<[string]>;

    isAddressRecovered(
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onchainID(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  compliance(overrides?: CallOverrides): Promise<string>;

  identityRegistry(overrides?: CallOverrides): Promise<string>;

  isAddressRecovered(
    _wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAgent(
    _agent: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onchainID(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    compliance(overrides?: CallOverrides): Promise<string>;

    identityRegistry(overrides?: CallOverrides): Promise<string>;

    isAddressRecovered(
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onchainID(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    compliance(overrides?: CallOverrides): Promise<BigNumber>;

    identityRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    isAddressRecovered(
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onchainID(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    compliance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    identityRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAddressRecovered(
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAgent(
      _agent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onchainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
