/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IERC1410ReadInterface extends utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "balanceOfByPartition(bytes32,address)": FunctionFragment;
    "canRedeemByPartition(address,bytes32,uint256,bytes,bytes)": FunctionFragment;
    "canTransferByPartition(address,address,bytes32,uint256,bytes,bytes)": FunctionFragment;
    "isMultiPartition()": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "isOperatorForPartition(bytes32,address,address)": FunctionFragment;
    "partitionsOf(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyByPartition(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "balanceOfAt"
      | "balanceOfByPartition"
      | "canRedeemByPartition"
      | "canTransferByPartition"
      | "isMultiPartition"
      | "isOperator"
      | "isOperatorForPartition"
      | "partitionsOf"
      | "totalSupply"
      | "totalSupplyByPartition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canRedeemByPartition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransferByPartition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isMultiPartition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorForPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "partitionsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyByPartition",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMultiPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorForPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partitionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyByPartition",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IERC1410Read extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1410ReadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    isMultiPartition(overrides?: CallOverrides): Promise<[boolean]>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  balanceOf(
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    _tokenHolder: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canRedeemByPartition(
    _from: PromiseOrValue<string>,
    _partition: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string, string]>;

  canTransferByPartition(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _partition: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string, string]>;

  isMultiPartition(overrides?: CallOverrides): Promise<boolean>;

  isOperator(
    _operator: PromiseOrValue<string>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorForPartition(
    _partition: PromiseOrValue<BytesLike>,
    _operator: PromiseOrValue<string>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  partitionsOf(
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyByPartition(
    _partition: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    isMultiPartition(overrides?: CallOverrides): Promise<boolean>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMultiPartition(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMultiPartition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
