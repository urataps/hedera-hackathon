/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type IssueDataStruct = {
  partition: PromiseOrValue<BytesLike>;
  tokenHolder: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
};

export type IssueDataStructOutput = [string, string, BigNumber, string] & {
  partition: string;
  tokenHolder: string;
  value: BigNumber;
  data: string;
};

export type OperatorTransferDataStruct = {
  partition: PromiseOrValue<BytesLike>;
  from: PromiseOrValue<string>;
  to: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
  operatorData: PromiseOrValue<BytesLike>;
};

export type OperatorTransferDataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  string,
  string
] & {
  partition: string;
  from: string;
  to: string;
  value: BigNumber;
  data: string;
  operatorData: string;
};

export type BasicTransferInfoStruct = {
  to: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
};

export type BasicTransferInfoStructOutput = [string, BigNumber] & {
  to: string;
  value: BigNumber;
};

export interface IERC1410Interface extends utils.Interface {
  functions: {
    "authorizeOperator(address)": FunctionFragment;
    "authorizeOperatorByPartition(bytes32,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "balanceOfByPartition(bytes32,address)": FunctionFragment;
    "canRedeemByPartition(address,bytes32,uint256,bytes,bytes)": FunctionFragment;
    "canTransferByPartition(address,address,bytes32,uint256,bytes,bytes)": FunctionFragment;
    "controllerRedeemByPartition(bytes32,address,uint256,bytes,bytes)": FunctionFragment;
    "controllerTransferByPartition(bytes32,address,address,uint256,bytes,bytes)": FunctionFragment;
    "initialize_ERC1410(bool)": FunctionFragment;
    "isMultiPartition()": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "isOperatorForPartition(bytes32,address,address)": FunctionFragment;
    "issueByPartition((bytes32,address,uint256,bytes))": FunctionFragment;
    "operatorRedeemByPartition(bytes32,address,uint256,bytes,bytes)": FunctionFragment;
    "operatorTransferByPartition((bytes32,address,address,uint256,bytes,bytes))": FunctionFragment;
    "partitionsOf(address)": FunctionFragment;
    "protectedRedeemFromByPartition(bytes32,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "protectedTransferFromByPartition(bytes32,address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "redeemByPartition(bytes32,uint256,bytes)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "revokeOperatorByPartition(bytes32,address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyByPartition(bytes32)": FunctionFragment;
    "transferByPartition(bytes32,(address,uint256),bytes)": FunctionFragment;
    "triggerAndSyncAll(bytes32,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorizeOperator"
      | "authorizeOperatorByPartition"
      | "balanceOf"
      | "balanceOfAt"
      | "balanceOfByPartition"
      | "canRedeemByPartition"
      | "canTransferByPartition"
      | "controllerRedeemByPartition"
      | "controllerTransferByPartition"
      | "initialize_ERC1410"
      | "isMultiPartition"
      | "isOperator"
      | "isOperatorForPartition"
      | "issueByPartition"
      | "operatorRedeemByPartition"
      | "operatorTransferByPartition"
      | "partitionsOf"
      | "protectedRedeemFromByPartition"
      | "protectedTransferFromByPartition"
      | "redeemByPartition"
      | "revokeOperator"
      | "revokeOperatorByPartition"
      | "totalSupply"
      | "totalSupplyByPartition"
      | "transferByPartition"
      | "triggerAndSyncAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperatorByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canRedeemByPartition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransferByPartition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerRedeemByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerTransferByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize_ERC1410",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMultiPartition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorForPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "issueByPartition",
    values: [IssueDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorRedeemByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorTransferByPartition",
    values: [OperatorTransferDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "partitionsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "protectedRedeemFromByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "protectedTransferFromByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperatorByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyByPartition",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      BasicTransferInfoStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerAndSyncAll",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize_ERC1410",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMultiPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorForPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partitionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectedRedeemFromByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectedTransferFromByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerAndSyncAll",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizedOperator(address,address)": EventFragment;
    "AuthorizedOperatorByPartition(bytes32,address,address)": EventFragment;
    "IssuedByPartition(bytes32,address,address,uint256,bytes)": EventFragment;
    "RedeemedByPartition(bytes32,address,address,uint256,bytes,bytes)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "RevokedOperatorByPartition(bytes32,address,address)": EventFragment;
    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuthorizedOperatorByPartition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperatorByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByPartition"): EventFragment;
}

export interface AuthorizedOperatorEventObject {
  operator: string;
  tokenHolder: string;
}
export type AuthorizedOperatorEvent = TypedEvent<
  [string, string],
  AuthorizedOperatorEventObject
>;

export type AuthorizedOperatorEventFilter =
  TypedEventFilter<AuthorizedOperatorEvent>;

export interface AuthorizedOperatorByPartitionEventObject {
  partition: string;
  operator: string;
  tokenHolder: string;
}
export type AuthorizedOperatorByPartitionEvent = TypedEvent<
  [string, string, string],
  AuthorizedOperatorByPartitionEventObject
>;

export type AuthorizedOperatorByPartitionEventFilter =
  TypedEventFilter<AuthorizedOperatorByPartitionEvent>;

export interface IssuedByPartitionEventObject {
  partition: string;
  operator: string;
  to: string;
  value: BigNumber;
  data: string;
}
export type IssuedByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  IssuedByPartitionEventObject
>;

export type IssuedByPartitionEventFilter =
  TypedEventFilter<IssuedByPartitionEvent>;

export interface RedeemedByPartitionEventObject {
  partition: string;
  operator: string;
  from: string;
  value: BigNumber;
  data: string;
  operatorData: string;
}
export type RedeemedByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, string, string],
  RedeemedByPartitionEventObject
>;

export type RedeemedByPartitionEventFilter =
  TypedEventFilter<RedeemedByPartitionEvent>;

export interface RevokedOperatorEventObject {
  operator: string;
  tokenHolder: string;
}
export type RevokedOperatorEvent = TypedEvent<
  [string, string],
  RevokedOperatorEventObject
>;

export type RevokedOperatorEventFilter = TypedEventFilter<RevokedOperatorEvent>;

export interface RevokedOperatorByPartitionEventObject {
  partition: string;
  operator: string;
  tokenHolder: string;
}
export type RevokedOperatorByPartitionEvent = TypedEvent<
  [string, string, string],
  RevokedOperatorByPartitionEventObject
>;

export type RevokedOperatorByPartitionEventFilter =
  TypedEventFilter<RevokedOperatorByPartitionEvent>;

export interface TransferByPartitionEventObject {
  _fromPartition: string;
  _operator: string;
  _from: string;
  _to: string;
  _value: BigNumber;
  _data: string;
  _operatorData: string;
}
export type TransferByPartitionEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, string],
  TransferByPartitionEventObject
>;

export type TransferByPartitionEventFilter =
  TypedEventFilter<TransferByPartitionEvent>;

export interface IERC1410 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1410Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorizeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    controllerRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controllerTransferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize_ERC1410(
      _multiPartition: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isMultiPartition(overrides?: CallOverrides): Promise<[boolean]>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueByPartition(
      _issueData: IssueDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operatorRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operatorTransferByPartition(
      _operatorTransferData: OperatorTransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    protectedRedeemFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    protectedTransferFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _basicTransferInfo: BasicTransferInfoStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggerAndSyncAll(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  authorizeOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeOperatorByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    _tokenHolder: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canRedeemByPartition(
    _from: PromiseOrValue<string>,
    _partition: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string, string]>;

  canTransferByPartition(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _partition: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string, string]>;

  controllerRedeemByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _tokenHolder: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controllerTransferByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize_ERC1410(
    _multiPartition: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isMultiPartition(overrides?: CallOverrides): Promise<boolean>;

  isOperator(
    _operator: PromiseOrValue<string>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorForPartition(
    _partition: PromiseOrValue<BytesLike>,
    _operator: PromiseOrValue<string>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueByPartition(
    _issueData: IssueDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operatorRedeemByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _tokenHolder: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operatorTransferByPartition(
    _operatorTransferData: OperatorTransferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  partitionsOf(
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  protectedRedeemFromByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    _nounce: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  protectedTransferFromByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    _nounce: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeOperatorByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyByPartition(
    _partition: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _basicTransferInfo: BasicTransferInfoStruct,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggerAndSyncAll(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorizeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    controllerRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    controllerTransferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize_ERC1410(
      _multiPartition: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    isMultiPartition(overrides?: CallOverrides): Promise<boolean>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueByPartition(
      _issueData: IssueDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorTransferByPartition(
      _operatorTransferData: OperatorTransferDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    protectedRedeemFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    protectedTransferFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _basicTransferInfo: BasicTransferInfoStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    triggerAndSyncAll(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorizedOperator(address,address)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorEventFilter;
    AuthorizedOperator(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorEventFilter;

    "AuthorizedOperatorByPartition(bytes32,address,address)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorByPartitionEventFilter;
    AuthorizedOperatorByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorByPartitionEventFilter;

    "IssuedByPartition(bytes32,address,address,uint256,bytes)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): IssuedByPartitionEventFilter;
    IssuedByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): IssuedByPartitionEventFilter;

    "RedeemedByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): RedeemedByPartitionEventFilter;
    RedeemedByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): RedeemedByPartitionEventFilter;

    "RevokedOperator(address,address)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorEventFilter;
    RevokedOperator(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorEventFilter;

    "RevokedOperatorByPartition(bytes32,address,address)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorByPartitionEventFilter;
    RevokedOperatorByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorByPartitionEventFilter;

    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)"(
      _fromPartition?: PromiseOrValue<BytesLike> | null,
      _operator?: null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _value?: null,
      _data?: null,
      _operatorData?: null
    ): TransferByPartitionEventFilter;
    TransferByPartition(
      _fromPartition?: PromiseOrValue<BytesLike> | null,
      _operator?: null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _value?: null,
      _data?: null,
      _operatorData?: null
    ): TransferByPartitionEventFilter;
  };

  estimateGas: {
    authorizeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllerRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controllerTransferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize_ERC1410(
      _multiPartition: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isMultiPartition(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueByPartition(
      _issueData: IssueDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operatorRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operatorTransferByPartition(
      _operatorTransferData: OperatorTransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protectedRedeemFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    protectedTransferFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _basicTransferInfo: BasicTransferInfoStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggerAndSyncAll(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllerRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controllerTransferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize_ERC1410(
      _multiPartition: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isMultiPartition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueByPartition(
      _issueData: IssueDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operatorRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operatorTransferByPartition(
      _operatorTransferData: OperatorTransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protectedRedeemFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    protectedTransferFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _basicTransferInfo: BasicTransferInfoStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggerAndSyncAll(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
