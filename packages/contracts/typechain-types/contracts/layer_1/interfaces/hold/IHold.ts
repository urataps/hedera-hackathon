/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type HoldStruct = {
  amount: PromiseOrValue<BigNumberish>;
  expirationTimestamp: PromiseOrValue<BigNumberish>;
  escrow: PromiseOrValue<string>;
  to: PromiseOrValue<string>;
  data: PromiseOrValue<BytesLike>;
};

export type HoldStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  amount: BigNumber;
  expirationTimestamp: BigNumber;
  escrow: string;
  to: string;
  data: string;
};

export type HoldIdentifierStruct = {
  partition: PromiseOrValue<BytesLike>;
  tokenHolder: PromiseOrValue<string>;
  holdId: PromiseOrValue<BigNumberish>;
};

export type HoldIdentifierStructOutput = [string, string, BigNumber] & {
  partition: string;
  tokenHolder: string;
  holdId: BigNumber;
};

export type IssueDataStruct = {
  partition: PromiseOrValue<BytesLike>;
  tokenHolder: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
};

export type IssueDataStructOutput = [string, string, BigNumber, string] & {
  partition: string;
  tokenHolder: string;
  value: BigNumber;
  data: string;
};

export type OperatorTransferDataStruct = {
  partition: PromiseOrValue<BytesLike>;
  from: PromiseOrValue<string>;
  to: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
  operatorData: PromiseOrValue<BytesLike>;
};

export type OperatorTransferDataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  string,
  string
] & {
  partition: string;
  from: string;
  to: string;
  value: BigNumber;
  data: string;
  operatorData: string;
};

export type ProtectedHoldStruct = {
  hold: HoldStruct;
  deadline: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
};

export type ProtectedHoldStructOutput = [
  HoldStructOutput,
  BigNumber,
  BigNumber
] & { hold: HoldStructOutput; deadline: BigNumber; nonce: BigNumber };

export type BasicTransferInfoStruct = {
  to: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
};

export type BasicTransferInfoStructOutput = [string, BigNumber] & {
  to: string;
  value: BigNumber;
};

export interface IHoldInterface extends utils.Interface {
  functions: {
    "applyRoles(bytes32[],bool[],address)": FunctionFragment;
    "authorizeOperator(address)": FunctionFragment;
    "authorizeOperatorByPartition(bytes32,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "balanceOfByPartition(bytes32,address)": FunctionFragment;
    "canRedeemByPartition(address,bytes32,uint256,bytes,bytes)": FunctionFragment;
    "canTransferByPartition(address,address,bytes32,uint256,bytes,bytes)": FunctionFragment;
    "controllerCreateHoldByPartition(bytes32,address,(uint256,uint256,address,address,bytes),bytes)": FunctionFragment;
    "controllerRedeemByPartition(bytes32,address,uint256,bytes,bytes)": FunctionFragment;
    "controllerTransferByPartition(bytes32,address,address,uint256,bytes,bytes)": FunctionFragment;
    "createHoldByPartition(bytes32,(uint256,uint256,address,address,bytes))": FunctionFragment;
    "createHoldFromByPartition(bytes32,address,(uint256,uint256,address,address,bytes),bytes)": FunctionFragment;
    "executeHoldByPartition((bytes32,address,uint256),address,uint256)": FunctionFragment;
    "getHeldAmountFor(address)": FunctionFragment;
    "getHeldAmountForByPartition(bytes32,address)": FunctionFragment;
    "getHoldCountForByPartition(bytes32,address)": FunctionFragment;
    "getHoldForByPartition((bytes32,address,uint256))": FunctionFragment;
    "getHoldThirdParty((bytes32,address,uint256))": FunctionFragment;
    "getHoldsIdForByPartition(bytes32,address,uint256,uint256)": FunctionFragment;
    "getRoleCountFor(address)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoleMembers(bytes32,uint256,uint256)": FunctionFragment;
    "getRolesFor(address,uint256,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize_ERC1410(bool)": FunctionFragment;
    "isMultiPartition()": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "isOperatorForPartition(bytes32,address,address)": FunctionFragment;
    "issueByPartition((bytes32,address,uint256,bytes))": FunctionFragment;
    "operatorCreateHoldByPartition(bytes32,address,(uint256,uint256,address,address,bytes),bytes)": FunctionFragment;
    "operatorRedeemByPartition(bytes32,address,uint256,bytes,bytes)": FunctionFragment;
    "operatorTransferByPartition((bytes32,address,address,uint256,bytes,bytes))": FunctionFragment;
    "partitionsOf(address)": FunctionFragment;
    "protectedCreateHoldByPartition(bytes32,address,((uint256,uint256,address,address,bytes),uint256,uint256),bytes)": FunctionFragment;
    "protectedRedeemFromByPartition(bytes32,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "protectedTransferFromByPartition(bytes32,address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "reclaimHoldByPartition((bytes32,address,uint256))": FunctionFragment;
    "redeemByPartition(bytes32,uint256,bytes)": FunctionFragment;
    "releaseHoldByPartition((bytes32,address,uint256),uint256)": FunctionFragment;
    "renounceRole(bytes32)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "revokeOperatorByPartition(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyByPartition(bytes32)": FunctionFragment;
    "transferByPartition(bytes32,(address,uint256),bytes)": FunctionFragment;
    "triggerAndSyncAll(bytes32,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "applyRoles"
      | "authorizeOperator"
      | "authorizeOperatorByPartition"
      | "balanceOf"
      | "balanceOfAt"
      | "balanceOfByPartition"
      | "canRedeemByPartition"
      | "canTransferByPartition"
      | "controllerCreateHoldByPartition"
      | "controllerRedeemByPartition"
      | "controllerTransferByPartition"
      | "createHoldByPartition"
      | "createHoldFromByPartition"
      | "executeHoldByPartition"
      | "getHeldAmountFor"
      | "getHeldAmountForByPartition"
      | "getHoldCountForByPartition"
      | "getHoldForByPartition"
      | "getHoldThirdParty"
      | "getHoldsIdForByPartition"
      | "getRoleCountFor"
      | "getRoleMemberCount"
      | "getRoleMembers"
      | "getRolesFor"
      | "grantRole"
      | "hasRole"
      | "initialize_ERC1410"
      | "isMultiPartition"
      | "isOperator"
      | "isOperatorForPartition"
      | "issueByPartition"
      | "operatorCreateHoldByPartition"
      | "operatorRedeemByPartition"
      | "operatorTransferByPartition"
      | "partitionsOf"
      | "protectedCreateHoldByPartition"
      | "protectedRedeemFromByPartition"
      | "protectedTransferFromByPartition"
      | "reclaimHoldByPartition"
      | "redeemByPartition"
      | "releaseHoldByPartition"
      | "renounceRole"
      | "revokeOperator"
      | "revokeOperatorByPartition"
      | "revokeRole"
      | "totalSupply"
      | "totalSupplyByPartition"
      | "transferByPartition"
      | "triggerAndSyncAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applyRoles",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<boolean>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperatorByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canRedeemByPartition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransferByPartition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerCreateHoldByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      HoldStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerRedeemByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerTransferByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createHoldByPartition",
    values: [PromiseOrValue<BytesLike>, HoldStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createHoldFromByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      HoldStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHoldByPartition",
    values: [
      HoldIdentifierStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getHeldAmountFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHeldAmountForByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHoldCountForByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHoldForByPartition",
    values: [HoldIdentifierStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getHoldThirdParty",
    values: [HoldIdentifierStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getHoldsIdForByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleCountFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMembers",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolesFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize_ERC1410",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMultiPartition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorForPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "issueByPartition",
    values: [IssueDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorCreateHoldByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      HoldStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorRedeemByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorTransferByPartition",
    values: [OperatorTransferDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "partitionsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "protectedCreateHoldByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      ProtectedHoldStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "protectedRedeemFromByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "protectedTransferFromByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimHoldByPartition",
    values: [HoldIdentifierStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseHoldByPartition",
    values: [HoldIdentifierStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperatorByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyByPartition",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      BasicTransferInfoStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerAndSyncAll",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "applyRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerCreateHoldByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHoldByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHoldFromByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHoldByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHeldAmountFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHeldAmountForByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHoldCountForByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHoldForByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHoldThirdParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHoldsIdForByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleCountFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolesFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize_ERC1410",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMultiPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorForPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorCreateHoldByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partitionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectedCreateHoldByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectedRedeemFromByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectedTransferFromByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimHoldByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseHoldByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerAndSyncAll",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizedOperator(address,address)": EventFragment;
    "AuthorizedOperatorByPartition(bytes32,address,address)": EventFragment;
    "ControllerHeldByPartition(address,address,bytes32,uint256,tuple,bytes)": EventFragment;
    "HeldByPartition(address,address,bytes32,uint256,tuple,bytes)": EventFragment;
    "HeldFromByPartition(address,address,bytes32,uint256,tuple,bytes)": EventFragment;
    "HoldByPartitionExecuted(address,bytes32,uint256,uint256,address)": EventFragment;
    "HoldByPartitionReclaimed(address,address,bytes32,uint256,uint256)": EventFragment;
    "HoldByPartitionReleased(address,bytes32,uint256,uint256)": EventFragment;
    "IssuedByPartition(bytes32,address,address,uint256,bytes)": EventFragment;
    "OperatorHeldByPartition(address,address,bytes32,uint256,tuple,bytes)": EventFragment;
    "ProtectedHeldByPartition(address,address,bytes32,uint256,tuple,bytes)": EventFragment;
    "RedeemedByPartition(bytes32,address,address,uint256,bytes,bytes)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "RevokedOperatorByPartition(bytes32,address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(address,address,bytes32)": EventFragment;
    "RoleRenounced(address,bytes32)": EventFragment;
    "RoleRevoked(address,address,bytes32)": EventFragment;
    "RolesApplied(bytes32[],bool[],address)": EventFragment;
    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuthorizedOperatorByPartition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerHeldByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HeldByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HeldFromByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldByPartitionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldByPartitionReclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldByPartitionReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorHeldByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectedHeldByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperatorByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRenounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RolesApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByPartition"): EventFragment;
}

export interface AuthorizedOperatorEventObject {
  operator: string;
  tokenHolder: string;
}
export type AuthorizedOperatorEvent = TypedEvent<
  [string, string],
  AuthorizedOperatorEventObject
>;

export type AuthorizedOperatorEventFilter =
  TypedEventFilter<AuthorizedOperatorEvent>;

export interface AuthorizedOperatorByPartitionEventObject {
  partition: string;
  operator: string;
  tokenHolder: string;
}
export type AuthorizedOperatorByPartitionEvent = TypedEvent<
  [string, string, string],
  AuthorizedOperatorByPartitionEventObject
>;

export type AuthorizedOperatorByPartitionEventFilter =
  TypedEventFilter<AuthorizedOperatorByPartitionEvent>;

export interface ControllerHeldByPartitionEventObject {
  operator: string;
  tokenHolder: string;
  partition: string;
  holdId: BigNumber;
  hold: HoldStructOutput;
  operatorData: string;
}
export type ControllerHeldByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, HoldStructOutput, string],
  ControllerHeldByPartitionEventObject
>;

export type ControllerHeldByPartitionEventFilter =
  TypedEventFilter<ControllerHeldByPartitionEvent>;

export interface HeldByPartitionEventObject {
  operator: string;
  tokenHolder: string;
  partition: string;
  holdId: BigNumber;
  hold: HoldStructOutput;
  operatorData: string;
}
export type HeldByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, HoldStructOutput, string],
  HeldByPartitionEventObject
>;

export type HeldByPartitionEventFilter = TypedEventFilter<HeldByPartitionEvent>;

export interface HeldFromByPartitionEventObject {
  operator: string;
  tokenHolder: string;
  partition: string;
  holdId: BigNumber;
  hold: HoldStructOutput;
  operatorData: string;
}
export type HeldFromByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, HoldStructOutput, string],
  HeldFromByPartitionEventObject
>;

export type HeldFromByPartitionEventFilter =
  TypedEventFilter<HeldFromByPartitionEvent>;

export interface HoldByPartitionExecutedEventObject {
  tokenHolder: string;
  partition: string;
  holdId: BigNumber;
  amount: BigNumber;
  to: string;
}
export type HoldByPartitionExecutedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  HoldByPartitionExecutedEventObject
>;

export type HoldByPartitionExecutedEventFilter =
  TypedEventFilter<HoldByPartitionExecutedEvent>;

export interface HoldByPartitionReclaimedEventObject {
  operator: string;
  tokenHolder: string;
  partition: string;
  holdId: BigNumber;
  amount: BigNumber;
}
export type HoldByPartitionReclaimedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  HoldByPartitionReclaimedEventObject
>;

export type HoldByPartitionReclaimedEventFilter =
  TypedEventFilter<HoldByPartitionReclaimedEvent>;

export interface HoldByPartitionReleasedEventObject {
  tokenHolder: string;
  partition: string;
  holdId: BigNumber;
  amount: BigNumber;
}
export type HoldByPartitionReleasedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  HoldByPartitionReleasedEventObject
>;

export type HoldByPartitionReleasedEventFilter =
  TypedEventFilter<HoldByPartitionReleasedEvent>;

export interface IssuedByPartitionEventObject {
  partition: string;
  operator: string;
  to: string;
  value: BigNumber;
  data: string;
}
export type IssuedByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  IssuedByPartitionEventObject
>;

export type IssuedByPartitionEventFilter =
  TypedEventFilter<IssuedByPartitionEvent>;

export interface OperatorHeldByPartitionEventObject {
  operator: string;
  tokenHolder: string;
  partition: string;
  holdId: BigNumber;
  hold: HoldStructOutput;
  operatorData: string;
}
export type OperatorHeldByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, HoldStructOutput, string],
  OperatorHeldByPartitionEventObject
>;

export type OperatorHeldByPartitionEventFilter =
  TypedEventFilter<OperatorHeldByPartitionEvent>;

export interface ProtectedHeldByPartitionEventObject {
  operator: string;
  tokenHolder: string;
  partition: string;
  holdId: BigNumber;
  hold: HoldStructOutput;
  operatorData: string;
}
export type ProtectedHeldByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, HoldStructOutput, string],
  ProtectedHeldByPartitionEventObject
>;

export type ProtectedHeldByPartitionEventFilter =
  TypedEventFilter<ProtectedHeldByPartitionEvent>;

export interface RedeemedByPartitionEventObject {
  partition: string;
  operator: string;
  from: string;
  value: BigNumber;
  data: string;
  operatorData: string;
}
export type RedeemedByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, string, string],
  RedeemedByPartitionEventObject
>;

export type RedeemedByPartitionEventFilter =
  TypedEventFilter<RedeemedByPartitionEvent>;

export interface RevokedOperatorEventObject {
  operator: string;
  tokenHolder: string;
}
export type RevokedOperatorEvent = TypedEvent<
  [string, string],
  RevokedOperatorEventObject
>;

export type RevokedOperatorEventFilter = TypedEventFilter<RevokedOperatorEvent>;

export interface RevokedOperatorByPartitionEventObject {
  partition: string;
  operator: string;
  tokenHolder: string;
}
export type RevokedOperatorByPartitionEvent = TypedEvent<
  [string, string, string],
  RevokedOperatorByPartitionEventObject
>;

export type RevokedOperatorByPartitionEventFilter =
  TypedEventFilter<RevokedOperatorByPartitionEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  operator: string;
  account: string;
  role: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRenouncedEventObject {
  account: string;
  role: string;
}
export type RoleRenouncedEvent = TypedEvent<
  [string, string],
  RoleRenouncedEventObject
>;

export type RoleRenouncedEventFilter = TypedEventFilter<RoleRenouncedEvent>;

export interface RoleRevokedEventObject {
  operator: string;
  account: string;
  role: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RolesAppliedEventObject {
  roles: string[];
  actives: boolean[];
  account: string;
}
export type RolesAppliedEvent = TypedEvent<
  [string[], boolean[], string],
  RolesAppliedEventObject
>;

export type RolesAppliedEventFilter = TypedEventFilter<RolesAppliedEvent>;

export interface TransferByPartitionEventObject {
  _fromPartition: string;
  _operator: string;
  _from: string;
  _to: string;
  _value: BigNumber;
  _data: string;
  _operatorData: string;
}
export type TransferByPartitionEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, string],
  TransferByPartitionEventObject
>;

export type TransferByPartitionEventFilter =
  TypedEventFilter<TransferByPartitionEvent>;

export interface IHold extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHoldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyRoles(
      _roles: PromiseOrValue<BytesLike>[],
      _actives: PromiseOrValue<boolean>[],
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    controllerCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controllerRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controllerTransferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _hold: HoldStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createHoldFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getHeldAmountFor(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount_: BigNumber }>;

    getHeldAmountForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount_: BigNumber }>;

    getHoldCountForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { holdCount_: BigNumber }>;

    getHoldForByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, string, number] & {
        amount_: BigNumber;
        expirationTimestamp_: BigNumber;
        escrow_: string;
        destination_: string;
        data_: string;
        operatorData_: string;
        thirdPartyType_: number;
      }
    >;

    getHoldThirdParty(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { thirdParty_: string }>;

    getHoldsIdForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { holdsId_: BigNumber[] }>;

    getRoleCountFor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { roleCount_: BigNumber }>;

    getRoleMemberCount(
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { memberCount_: BigNumber }>;

    getRoleMembers(
      _role: PromiseOrValue<BytesLike>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { members_: string[] }>;

    getRolesFor(
      _account: PromiseOrValue<string>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { roles_: string[] }>;

    grantRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize_ERC1410(
      _multiPartition: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isMultiPartition(overrides?: CallOverrides): Promise<[boolean]>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueByPartition(
      _issueData: IssueDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operatorCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operatorRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operatorTransferByPartition(
      _operatorTransferData: OperatorTransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    protectedCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _protectedHold: ProtectedHoldStruct,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    protectedRedeemFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    protectedTransferFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reclaimHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releaseHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _basicTransferInfo: BasicTransferInfoStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggerAndSyncAll(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  applyRoles(
    _roles: PromiseOrValue<BytesLike>[],
    _actives: PromiseOrValue<boolean>[],
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeOperatorByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    _tokenHolder: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canRedeemByPartition(
    _from: PromiseOrValue<string>,
    _partition: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string, string]>;

  canTransferByPartition(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _partition: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string, string]>;

  controllerCreateHoldByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _hold: HoldStruct,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controllerRedeemByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _tokenHolder: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controllerTransferByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createHoldByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _hold: HoldStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createHoldFromByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _hold: HoldStruct,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeHoldByPartition(
    _holdIdentifier: HoldIdentifierStruct,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getHeldAmountFor(
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHeldAmountForByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHoldCountForByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHoldForByPartition(
    _holdIdentifier: HoldIdentifierStruct,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string, string, number] & {
      amount_: BigNumber;
      expirationTimestamp_: BigNumber;
      escrow_: string;
      destination_: string;
      data_: string;
      operatorData_: string;
      thirdPartyType_: number;
    }
  >;

  getHoldThirdParty(
    _holdIdentifier: HoldIdentifierStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getHoldsIdForByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _tokenHolder: PromiseOrValue<string>,
    _pageIndex: PromiseOrValue<BigNumberish>,
    _pageLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRoleCountFor(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleMemberCount(
    _role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleMembers(
    _role: PromiseOrValue<BytesLike>,
    _pageIndex: PromiseOrValue<BigNumberish>,
    _pageLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRolesFor(
    _account: PromiseOrValue<string>,
    _pageIndex: PromiseOrValue<BigNumberish>,
    _pageLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantRole(
    _role: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    _role: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize_ERC1410(
    _multiPartition: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isMultiPartition(overrides?: CallOverrides): Promise<boolean>;

  isOperator(
    _operator: PromiseOrValue<string>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorForPartition(
    _partition: PromiseOrValue<BytesLike>,
    _operator: PromiseOrValue<string>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueByPartition(
    _issueData: IssueDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operatorCreateHoldByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _hold: HoldStruct,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operatorRedeemByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _tokenHolder: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operatorTransferByPartition(
    _operatorTransferData: OperatorTransferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  partitionsOf(
    _tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  protectedCreateHoldByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _protectedHold: ProtectedHoldStruct,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  protectedRedeemFromByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    _nounce: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  protectedTransferFromByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    _nounce: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reclaimHoldByPartition(
    _holdIdentifier: HoldIdentifierStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releaseHoldByPartition(
    _holdIdentifier: HoldIdentifierStruct,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    _role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeOperatorByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    _role: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyByPartition(
    _partition: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferByPartition(
    _partition: PromiseOrValue<BytesLike>,
    _basicTransferInfo: BasicTransferInfoStruct,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggerAndSyncAll(
    _partition: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyRoles(
      _roles: PromiseOrValue<BytesLike>[],
      _actives: PromiseOrValue<boolean>[],
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string, string]>;

    controllerCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { success_: boolean; holdId_: BigNumber }
    >;

    controllerRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    controllerTransferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _hold: HoldStruct,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { success_: boolean; holdId_: BigNumber }
    >;

    createHoldFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { success_: boolean; holdId_: BigNumber }
    >;

    executeHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getHeldAmountFor(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHeldAmountForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHoldCountForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHoldForByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, string, number] & {
        amount_: BigNumber;
        expirationTimestamp_: BigNumber;
        escrow_: string;
        destination_: string;
        data_: string;
        operatorData_: string;
        thirdPartyType_: number;
      }
    >;

    getHoldThirdParty(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getHoldsIdForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRoleCountFor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMembers(
      _role: PromiseOrValue<BytesLike>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRolesFor(
      _account: PromiseOrValue<string>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize_ERC1410(
      _multiPartition: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    isMultiPartition(overrides?: CallOverrides): Promise<boolean>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueByPartition(
      _issueData: IssueDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { success_: boolean; holdId_: BigNumber }
    >;

    operatorRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorTransferByPartition(
      _operatorTransferData: OperatorTransferDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    protectedCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _protectedHold: ProtectedHoldStruct,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { success_: boolean; holdId_: BigNumber }
    >;

    protectedRedeemFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    protectedTransferFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    reclaimHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    redeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _basicTransferInfo: BasicTransferInfoStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    triggerAndSyncAll(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorizedOperator(address,address)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorEventFilter;
    AuthorizedOperator(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorEventFilter;

    "AuthorizedOperatorByPartition(bytes32,address,address)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorByPartitionEventFilter;
    AuthorizedOperatorByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorByPartitionEventFilter;

    "ControllerHeldByPartition(address,address,bytes32,uint256,tuple,bytes)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: null,
      holdId?: null,
      hold?: null,
      operatorData?: null
    ): ControllerHeldByPartitionEventFilter;
    ControllerHeldByPartition(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: null,
      holdId?: null,
      hold?: null,
      operatorData?: null
    ): ControllerHeldByPartitionEventFilter;

    "HeldByPartition(address,address,bytes32,uint256,tuple,bytes)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: null,
      holdId?: null,
      hold?: null,
      operatorData?: null
    ): HeldByPartitionEventFilter;
    HeldByPartition(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: null,
      holdId?: null,
      hold?: null,
      operatorData?: null
    ): HeldByPartitionEventFilter;

    "HeldFromByPartition(address,address,bytes32,uint256,tuple,bytes)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: null,
      holdId?: null,
      hold?: null,
      operatorData?: null
    ): HeldFromByPartitionEventFilter;
    HeldFromByPartition(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: null,
      holdId?: null,
      hold?: null,
      operatorData?: null
    ): HeldFromByPartitionEventFilter;

    "HoldByPartitionExecuted(address,bytes32,uint256,uint256,address)"(
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: PromiseOrValue<BytesLike> | null,
      holdId?: null,
      amount?: null,
      to?: null
    ): HoldByPartitionExecutedEventFilter;
    HoldByPartitionExecuted(
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: PromiseOrValue<BytesLike> | null,
      holdId?: null,
      amount?: null,
      to?: null
    ): HoldByPartitionExecutedEventFilter;

    "HoldByPartitionReclaimed(address,address,bytes32,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: PromiseOrValue<BytesLike> | null,
      holdId?: null,
      amount?: null
    ): HoldByPartitionReclaimedEventFilter;
    HoldByPartitionReclaimed(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: PromiseOrValue<BytesLike> | null,
      holdId?: null,
      amount?: null
    ): HoldByPartitionReclaimedEventFilter;

    "HoldByPartitionReleased(address,bytes32,uint256,uint256)"(
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: PromiseOrValue<BytesLike> | null,
      holdId?: null,
      amount?: null
    ): HoldByPartitionReleasedEventFilter;
    HoldByPartitionReleased(
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: PromiseOrValue<BytesLike> | null,
      holdId?: null,
      amount?: null
    ): HoldByPartitionReleasedEventFilter;

    "IssuedByPartition(bytes32,address,address,uint256,bytes)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): IssuedByPartitionEventFilter;
    IssuedByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): IssuedByPartitionEventFilter;

    "OperatorHeldByPartition(address,address,bytes32,uint256,tuple,bytes)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: null,
      holdId?: null,
      hold?: null,
      operatorData?: null
    ): OperatorHeldByPartitionEventFilter;
    OperatorHeldByPartition(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: null,
      holdId?: null,
      hold?: null,
      operatorData?: null
    ): OperatorHeldByPartitionEventFilter;

    "ProtectedHeldByPartition(address,address,bytes32,uint256,tuple,bytes)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: null,
      holdId?: null,
      hold?: null,
      operatorData?: null
    ): ProtectedHeldByPartitionEventFilter;
    ProtectedHeldByPartition(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null,
      partition?: null,
      holdId?: null,
      hold?: null,
      operatorData?: null
    ): ProtectedHeldByPartitionEventFilter;

    "RedeemedByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): RedeemedByPartitionEventFilter;
    RedeemedByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): RedeemedByPartitionEventFilter;

    "RevokedOperator(address,address)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorEventFilter;
    RevokedOperator(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorEventFilter;

    "RevokedOperatorByPartition(bytes32,address,address)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorByPartitionEventFilter;
    RevokedOperatorByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorByPartitionEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(address,address,bytes32)"(
      operator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BytesLike> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      operator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BytesLike> | null
    ): RoleGrantedEventFilter;

    "RoleRenounced(address,bytes32)"(
      account?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BytesLike> | null
    ): RoleRenouncedEventFilter;
    RoleRenounced(
      account?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BytesLike> | null
    ): RoleRenouncedEventFilter;

    "RoleRevoked(address,address,bytes32)"(
      operator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BytesLike> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      operator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BytesLike> | null
    ): RoleRevokedEventFilter;

    "RolesApplied(bytes32[],bool[],address)"(
      roles?: null,
      actives?: null,
      account?: null
    ): RolesAppliedEventFilter;
    RolesApplied(
      roles?: null,
      actives?: null,
      account?: null
    ): RolesAppliedEventFilter;

    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)"(
      _fromPartition?: PromiseOrValue<BytesLike> | null,
      _operator?: null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _value?: null,
      _data?: null,
      _operatorData?: null
    ): TransferByPartitionEventFilter;
    TransferByPartition(
      _fromPartition?: PromiseOrValue<BytesLike> | null,
      _operator?: null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _value?: null,
      _data?: null,
      _operatorData?: null
    ): TransferByPartitionEventFilter;
  };

  estimateGas: {
    applyRoles(
      _roles: PromiseOrValue<BytesLike>[],
      _actives: PromiseOrValue<boolean>[],
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllerCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controllerRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controllerTransferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _hold: HoldStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createHoldFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getHeldAmountFor(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHeldAmountForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHoldCountForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHoldForByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHoldThirdParty(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHoldsIdForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleCountFor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMembers(
      _role: PromiseOrValue<BytesLike>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolesFor(
      _account: PromiseOrValue<string>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize_ERC1410(
      _multiPartition: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isMultiPartition(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueByPartition(
      _issueData: IssueDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operatorCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operatorRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operatorTransferByPartition(
      _operatorTransferData: OperatorTransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protectedCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _protectedHold: ProtectedHoldStruct,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    protectedRedeemFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    protectedTransferFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reclaimHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releaseHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _basicTransferInfo: BasicTransferInfoStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggerAndSyncAll(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyRoles(
      _roles: PromiseOrValue<BytesLike>[],
      _actives: PromiseOrValue<boolean>[],
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _tokenHolder: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRedeemByPartition(
      _from: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canTransferByPartition(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllerCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controllerRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controllerTransferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _hold: HoldStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createHoldFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getHeldAmountFor(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHeldAmountForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHoldCountForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHoldForByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHoldThirdParty(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHoldsIdForByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleCountFor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMembers(
      _role: PromiseOrValue<BytesLike>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRolesFor(
      _account: PromiseOrValue<string>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize_ERC1410(
      _multiPartition: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isMultiPartition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorForPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueByPartition(
      _issueData: IssueDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operatorCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _hold: HoldStruct,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operatorRedeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _tokenHolder: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operatorTransferByPartition(
      _operatorTransferData: OperatorTransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    partitionsOf(
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protectedCreateHoldByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _protectedHold: ProtectedHoldStruct,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    protectedRedeemFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    protectedTransferFromByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _nounce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reclaimHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releaseHoldByPartition(
      _holdIdentifier: HoldIdentifierStruct,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperatorByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      _role: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyByPartition(
      _partition: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferByPartition(
      _partition: PromiseOrValue<BytesLike>,
      _basicTransferInfo: BasicTransferInfoStruct,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggerAndSyncAll(
      _partition: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
