/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace TRexIBusinessLogicResolver {
  export type BusinessLogicRegistryDataStruct = {
    businessLogicKey: PromiseOrValue<BytesLike>;
    businessLogicAddress: PromiseOrValue<string>;
  };

  export type BusinessLogicRegistryDataStructOutput = [string, string] & {
    businessLogicKey: string;
    businessLogicAddress: string;
  };
}

export interface TRexIBusinessLogicResolverInterface extends utils.Interface {
  functions: {
    "addSelectorsToBlacklist(bytes32,bytes4[])": FunctionFragment;
    "getBusinessLogicCount()": FunctionFragment;
    "getBusinessLogicKeys(uint256,uint256)": FunctionFragment;
    "getLatestVersion()": FunctionFragment;
    "getSelectorsBlacklist(bytes32,uint256,uint256)": FunctionFragment;
    "getVersionStatus(uint256)": FunctionFragment;
    "initialize_BusinessLogicResolver()": FunctionFragment;
    "registerBusinessLogics((bytes32,address)[])": FunctionFragment;
    "removeSelectorsFromBlacklist(bytes32,bytes4[])": FunctionFragment;
    "resolveBusinessLogicByVersion(bytes32,uint256)": FunctionFragment;
    "resolveLatestBusinessLogic(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSelectorsToBlacklist"
      | "getBusinessLogicCount"
      | "getBusinessLogicKeys"
      | "getLatestVersion"
      | "getSelectorsBlacklist"
      | "getVersionStatus"
      | "initialize_BusinessLogicResolver"
      | "registerBusinessLogics"
      | "removeSelectorsFromBlacklist"
      | "resolveBusinessLogicByVersion"
      | "resolveLatestBusinessLogic"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSelectorsToBlacklist",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBusinessLogicCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBusinessLogicKeys",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSelectorsBlacklist",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize_BusinessLogicResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerBusinessLogics",
    values: [TRexIBusinessLogicResolver.BusinessLogicRegistryDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSelectorsFromBlacklist",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveBusinessLogicByVersion",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveLatestBusinessLogic",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSelectorsToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBusinessLogicCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBusinessLogicKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSelectorsBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize_BusinessLogicResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBusinessLogics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSelectorsFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveBusinessLogicByVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveLatestBusinessLogic",
    data: BytesLike
  ): Result;

  events: {
    "BusinessLogicsRegistered(tuple[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BusinessLogicsRegistered"): EventFragment;
}

export interface BusinessLogicsRegisteredEventObject {
  businessLogics: TRexIBusinessLogicResolver.BusinessLogicRegistryDataStructOutput[];
  newLatestVersion: BigNumber;
}
export type BusinessLogicsRegisteredEvent = TypedEvent<
  [
    TRexIBusinessLogicResolver.BusinessLogicRegistryDataStructOutput[],
    BigNumber
  ],
  BusinessLogicsRegisteredEventObject
>;

export type BusinessLogicsRegisteredEventFilter =
  TypedEventFilter<BusinessLogicsRegisteredEvent>;

export interface TRexIBusinessLogicResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TRexIBusinessLogicResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSelectorsToBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBusinessLogicCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { businessLogicCount_: BigNumber }>;

    getBusinessLogicKeys(
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { businessLogicKeys_: string[] }>;

    getLatestVersion(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { latestVersion_: BigNumber }>;

    getSelectorsBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { selectors_: string[] }>;

    getVersionStatus(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { status_: number }>;

    initialize_BusinessLogicResolver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerBusinessLogics(
      _businessLogics: TRexIBusinessLogicResolver.BusinessLogicRegistryDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSelectorsFromBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveBusinessLogicByVersion(
      _businessLogicKey: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { businessLogicAddress_: string }>;

    resolveLatestBusinessLogic(
      _businessLogicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { businessLogicAddress_: string }>;
  };

  addSelectorsToBlacklist(
    _configurationId: PromiseOrValue<BytesLike>,
    _selectors: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBusinessLogicCount(overrides?: CallOverrides): Promise<BigNumber>;

  getBusinessLogicKeys(
    _pageIndex: PromiseOrValue<BigNumberish>,
    _pageLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getLatestVersion(overrides?: CallOverrides): Promise<BigNumber>;

  getSelectorsBlacklist(
    _configurationId: PromiseOrValue<BytesLike>,
    _pageIndex: PromiseOrValue<BigNumberish>,
    _pageLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getVersionStatus(
    _version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  initialize_BusinessLogicResolver(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerBusinessLogics(
    _businessLogics: TRexIBusinessLogicResolver.BusinessLogicRegistryDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSelectorsFromBlacklist(
    _configurationId: PromiseOrValue<BytesLike>,
    _selectors: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveBusinessLogicByVersion(
    _businessLogicKey: PromiseOrValue<BytesLike>,
    _version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveLatestBusinessLogic(
    _businessLogicKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addSelectorsToBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBusinessLogicCount(overrides?: CallOverrides): Promise<BigNumber>;

    getBusinessLogicKeys(
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getLatestVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getSelectorsBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVersionStatus(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    initialize_BusinessLogicResolver(
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerBusinessLogics(
      _businessLogics: TRexIBusinessLogicResolver.BusinessLogicRegistryDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeSelectorsFromBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    resolveBusinessLogicByVersion(
      _businessLogicKey: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveLatestBusinessLogic(
      _businessLogicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "BusinessLogicsRegistered(tuple[],uint256)"(
      businessLogics?: null,
      newLatestVersion?: null
    ): BusinessLogicsRegisteredEventFilter;
    BusinessLogicsRegistered(
      businessLogics?: null,
      newLatestVersion?: null
    ): BusinessLogicsRegisteredEventFilter;
  };

  estimateGas: {
    addSelectorsToBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBusinessLogicCount(overrides?: CallOverrides): Promise<BigNumber>;

    getBusinessLogicKeys(
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getSelectorsBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionStatus(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize_BusinessLogicResolver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerBusinessLogics(
      _businessLogics: TRexIBusinessLogicResolver.BusinessLogicRegistryDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSelectorsFromBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveBusinessLogicByVersion(
      _businessLogicKey: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveLatestBusinessLogic(
      _businessLogicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSelectorsToBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBusinessLogicCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBusinessLogicKeys(
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSelectorsBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _pageIndex: PromiseOrValue<BigNumberish>,
      _pageLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionStatus(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize_BusinessLogicResolver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerBusinessLogics(
      _businessLogics: TRexIBusinessLogicResolver.BusinessLogicRegistryDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSelectorsFromBlacklist(
      _configurationId: PromiseOrValue<BytesLike>,
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveBusinessLogicByVersion(
      _businessLogicKey: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveLatestBusinessLogic(
      _businessLogicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
