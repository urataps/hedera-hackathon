/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface DiamondCutFacetInterface extends utils.Interface {
  functions: {
    "getConfigInfo()": FunctionFragment;
    "getStaticFunctionSelectors()": FunctionFragment;
    "getStaticInterfaceIds()": FunctionFragment;
    "getStaticResolverKey()": FunctionFragment;
    "updateConfig(bytes32,uint256)": FunctionFragment;
    "updateConfigVersion(uint256)": FunctionFragment;
    "updateResolver(address,bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getConfigInfo"
      | "getStaticFunctionSelectors"
      | "getStaticInterfaceIds"
      | "getStaticResolverKey"
      | "updateConfig"
      | "updateConfigVersion"
      | "updateResolver"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getConfigInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStaticFunctionSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStaticInterfaceIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStaticResolverKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfigVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateResolver",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getConfigInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStaticFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStaticInterfaceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStaticResolverKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfigVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateResolver",
    data: BytesLike
  ): Result;

  events: {
    "PartitionsProtected(address)": EventFragment;
    "PartitionsUnProtected(address)": EventFragment;
    "ProtectedRedeemFrom(bytes32,address,address,uint256,uint256,uint256,bytes)": EventFragment;
    "ProtectedTransferFrom(bytes32,address,address,address,uint256,uint256,uint256,bytes)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "TokenPaused(address)": EventFragment;
    "TokenUnpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PartitionsProtected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartitionsUnProtected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectedRedeemFrom"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectedTransferFrom"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnpaused"): EventFragment;
}

export interface PartitionsProtectedEventObject {
  operator: string;
}
export type PartitionsProtectedEvent = TypedEvent<
  [string],
  PartitionsProtectedEventObject
>;

export type PartitionsProtectedEventFilter =
  TypedEventFilter<PartitionsProtectedEvent>;

export interface PartitionsUnProtectedEventObject {
  operator: string;
}
export type PartitionsUnProtectedEvent = TypedEvent<
  [string],
  PartitionsUnProtectedEventObject
>;

export type PartitionsUnProtectedEventFilter =
  TypedEventFilter<PartitionsUnProtectedEvent>;

export interface ProtectedRedeemFromEventObject {
  partition: string;
  operator: string;
  from: string;
  value: BigNumber;
  deadline: BigNumber;
  nounce: BigNumber;
  signature: string;
}
export type ProtectedRedeemFromEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string],
  ProtectedRedeemFromEventObject
>;

export type ProtectedRedeemFromEventFilter =
  TypedEventFilter<ProtectedRedeemFromEvent>;

export interface ProtectedTransferFromEventObject {
  partition: string;
  operator: string;
  from: string;
  to: string;
  value: BigNumber;
  deadline: BigNumber;
  nounce: BigNumber;
  signature: string;
}
export type ProtectedTransferFromEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber, string],
  ProtectedTransferFromEventObject
>;

export type ProtectedTransferFromEventFilter =
  TypedEventFilter<ProtectedTransferFromEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface TokenPausedEventObject {
  operator: string;
}
export type TokenPausedEvent = TypedEvent<[string], TokenPausedEventObject>;

export type TokenPausedEventFilter = TypedEventFilter<TokenPausedEvent>;

export interface TokenUnpausedEventObject {
  operator: string;
}
export type TokenUnpausedEvent = TypedEvent<[string], TokenUnpausedEventObject>;

export type TokenUnpausedEventFilter = TypedEventFilter<TokenUnpausedEvent>;

export interface DiamondCutFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondCutFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getConfigInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        resolver_: string;
        configurationId_: string;
        version_: BigNumber;
      }
    >;

    getStaticFunctionSelectors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { staticFunctionSelectors_: string[] }>;

    getStaticInterfaceIds(
      overrides?: CallOverrides
    ): Promise<[string[]] & { staticInterfaceIds_: string[] }>;

    getStaticResolverKey(
      overrides?: CallOverrides
    ): Promise<[string] & { staticResolverKey_: string }>;

    updateConfig(
      _newConfigurationId: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateConfigVersion(
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateResolver(
      _newResolver: PromiseOrValue<string>,
      _newConfigurationId: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getConfigInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      resolver_: string;
      configurationId_: string;
      version_: BigNumber;
    }
  >;

  getStaticFunctionSelectors(overrides?: CallOverrides): Promise<string[]>;

  getStaticInterfaceIds(overrides?: CallOverrides): Promise<string[]>;

  getStaticResolverKey(overrides?: CallOverrides): Promise<string>;

  updateConfig(
    _newConfigurationId: PromiseOrValue<BytesLike>,
    _newVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateConfigVersion(
    _newVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateResolver(
    _newResolver: PromiseOrValue<string>,
    _newConfigurationId: PromiseOrValue<BytesLike>,
    _newVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getConfigInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        resolver_: string;
        configurationId_: string;
        version_: BigNumber;
      }
    >;

    getStaticFunctionSelectors(overrides?: CallOverrides): Promise<string[]>;

    getStaticInterfaceIds(overrides?: CallOverrides): Promise<string[]>;

    getStaticResolverKey(overrides?: CallOverrides): Promise<string>;

    updateConfig(
      _newConfigurationId: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConfigVersion(
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateResolver(
      _newResolver: PromiseOrValue<string>,
      _newConfigurationId: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PartitionsProtected(address)"(
      operator?: PromiseOrValue<string> | null
    ): PartitionsProtectedEventFilter;
    PartitionsProtected(
      operator?: PromiseOrValue<string> | null
    ): PartitionsProtectedEventFilter;

    "PartitionsUnProtected(address)"(
      operator?: PromiseOrValue<string> | null
    ): PartitionsUnProtectedEventFilter;
    PartitionsUnProtected(
      operator?: PromiseOrValue<string> | null
    ): PartitionsUnProtectedEventFilter;

    "ProtectedRedeemFrom(bytes32,address,address,uint256,uint256,uint256,bytes)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      value?: null,
      deadline?: null,
      nounce?: null,
      signature?: null
    ): ProtectedRedeemFromEventFilter;
    ProtectedRedeemFrom(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      value?: null,
      deadline?: null,
      nounce?: null,
      signature?: null
    ): ProtectedRedeemFromEventFilter;

    "ProtectedTransferFrom(bytes32,address,address,address,uint256,uint256,uint256,bytes)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: null,
      value?: null,
      deadline?: null,
      nounce?: null,
      signature?: null
    ): ProtectedTransferFromEventFilter;
    ProtectedTransferFrom(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: null,
      value?: null,
      deadline?: null,
      nounce?: null,
      signature?: null
    ): ProtectedTransferFromEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "TokenPaused(address)"(
      operator?: PromiseOrValue<string> | null
    ): TokenPausedEventFilter;
    TokenPaused(
      operator?: PromiseOrValue<string> | null
    ): TokenPausedEventFilter;

    "TokenUnpaused(address)"(
      operator?: PromiseOrValue<string> | null
    ): TokenUnpausedEventFilter;
    TokenUnpaused(
      operator?: PromiseOrValue<string> | null
    ): TokenUnpausedEventFilter;
  };

  estimateGas: {
    getConfigInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getStaticFunctionSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    getStaticInterfaceIds(overrides?: CallOverrides): Promise<BigNumber>;

    getStaticResolverKey(overrides?: CallOverrides): Promise<BigNumber>;

    updateConfig(
      _newConfigurationId: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateConfigVersion(
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateResolver(
      _newResolver: PromiseOrValue<string>,
      _newConfigurationId: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getConfigInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStaticFunctionSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStaticInterfaceIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStaticResolverKey(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateConfig(
      _newConfigurationId: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateConfigVersion(
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateResolver(
      _newResolver: PromiseOrValue<string>,
      _newConfigurationId: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
