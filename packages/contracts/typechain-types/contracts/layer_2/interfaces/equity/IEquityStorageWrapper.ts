/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IEquityStorageWrapperInterface extends utils.Interface {
  functions: {};

  events: {
    "DividendSet(bytes32,uint256,address,uint256,uint256,uint256)": EventFragment;
    "ScheduledBalanceAdjustmentSet(bytes32,uint256,address,uint256,uint256,uint256)": EventFragment;
    "VotingSet(bytes32,uint256,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DividendSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ScheduledBalanceAdjustmentSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingSet"): EventFragment;
}

export interface DividendSetEventObject {
  corporateActionId: string;
  dividendId: BigNumber;
  operator: string;
  recordDate: BigNumber;
  executionDate: BigNumber;
  amount: BigNumber;
}
export type DividendSetEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  DividendSetEventObject
>;

export type DividendSetEventFilter = TypedEventFilter<DividendSetEvent>;

export interface ScheduledBalanceAdjustmentSetEventObject {
  corporateActionId: string;
  balanceAdjustmentId: BigNumber;
  operator: string;
  executionDate: BigNumber;
  factor: BigNumber;
  decimals: BigNumber;
}
export type ScheduledBalanceAdjustmentSetEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  ScheduledBalanceAdjustmentSetEventObject
>;

export type ScheduledBalanceAdjustmentSetEventFilter =
  TypedEventFilter<ScheduledBalanceAdjustmentSetEvent>;

export interface VotingSetEventObject {
  corporateActionId: string;
  voteId: BigNumber;
  operator: string;
  recordDate: BigNumber;
  data: string;
}
export type VotingSetEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  VotingSetEventObject
>;

export type VotingSetEventFilter = TypedEventFilter<VotingSetEvent>;

export interface IEquityStorageWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEquityStorageWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "DividendSet(bytes32,uint256,address,uint256,uint256,uint256)"(
      corporateActionId?: null,
      dividendId?: null,
      operator?: PromiseOrValue<string> | null,
      recordDate?: PromiseOrValue<BigNumberish> | null,
      executionDate?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DividendSetEventFilter;
    DividendSet(
      corporateActionId?: null,
      dividendId?: null,
      operator?: PromiseOrValue<string> | null,
      recordDate?: PromiseOrValue<BigNumberish> | null,
      executionDate?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DividendSetEventFilter;

    "ScheduledBalanceAdjustmentSet(bytes32,uint256,address,uint256,uint256,uint256)"(
      corporateActionId?: null,
      balanceAdjustmentId?: null,
      operator?: PromiseOrValue<string> | null,
      executionDate?: PromiseOrValue<BigNumberish> | null,
      factor?: null,
      decimals?: null
    ): ScheduledBalanceAdjustmentSetEventFilter;
    ScheduledBalanceAdjustmentSet(
      corporateActionId?: null,
      balanceAdjustmentId?: null,
      operator?: PromiseOrValue<string> | null,
      executionDate?: PromiseOrValue<BigNumberish> | null,
      factor?: null,
      decimals?: null
    ): ScheduledBalanceAdjustmentSetEventFilter;

    "VotingSet(bytes32,uint256,address,uint256,bytes)"(
      corporateActionId?: null,
      voteId?: null,
      operator?: PromiseOrValue<string> | null,
      recordDate?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): VotingSetEventFilter;
    VotingSet(
      corporateActionId?: null,
      voteId?: null,
      operator?: PromiseOrValue<string> | null,
      recordDate?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): VotingSetEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
