/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ComplianceMockInterface extends utils.Interface {
  functions: {
    "canTransfer(address,address,uint256)": FunctionFragment;
    "created(address,uint256)": FunctionFragment;
    "createdHit()": FunctionFragment;
    "destroyed(address,uint256)": FunctionFragment;
    "destroyedHit()": FunctionFragment;
    "setFlags(bool,bool)": FunctionFragment;
    "setFlagsByMethod(bool[],bytes32[],bool[],bytes32[])": FunctionFragment;
    "transferred(address,address,uint256)": FunctionFragment;
    "transferredHit()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canTransfer"
      | "created"
      | "createdHit"
      | "destroyed"
      | "destroyedHit"
      | "setFlags"
      | "setFlagsByMethod"
      | "transferred"
      | "transferredHit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "created",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createdHit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destroyed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyedHit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFlags",
    values: [PromiseOrValue<boolean>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlagsByMethod",
    values: [
      PromiseOrValue<boolean>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<boolean>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferred",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferredHit",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "canTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createdHit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroyed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "destroyedHit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFlags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFlagsByMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferredHit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ComplianceMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ComplianceMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    created(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createdHit(overrides?: CallOverrides): Promise<[BigNumber]>;

    destroyed(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    destroyedHit(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFlags(
      _canTransferFlag: PromiseOrValue<boolean>,
      _revertFlag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFlagsByMethod(
      _canTransferFlag: PromiseOrValue<boolean>[],
      _canTransferKey: PromiseOrValue<BytesLike>[],
      _revertFlag: PromiseOrValue<boolean>[],
      _revertKey: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferred(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferredHit(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  canTransfer(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  created(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createdHit(overrides?: CallOverrides): Promise<BigNumber>;

  destroyed(
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  destroyedHit(overrides?: CallOverrides): Promise<BigNumber>;

  setFlags(
    _canTransferFlag: PromiseOrValue<boolean>,
    _revertFlag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFlagsByMethod(
    _canTransferFlag: PromiseOrValue<boolean>[],
    _canTransferKey: PromiseOrValue<BytesLike>[],
    _revertFlag: PromiseOrValue<boolean>[],
    _revertKey: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferred(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferredHit(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    canTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    created(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createdHit(overrides?: CallOverrides): Promise<BigNumber>;

    destroyed(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    destroyedHit(overrides?: CallOverrides): Promise<BigNumber>;

    setFlags(
      _canTransferFlag: PromiseOrValue<boolean>,
      _revertFlag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFlagsByMethod(
      _canTransferFlag: PromiseOrValue<boolean>[],
      _canTransferKey: PromiseOrValue<BytesLike>[],
      _revertFlag: PromiseOrValue<boolean>[],
      _revertKey: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferred(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferredHit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    canTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    created(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createdHit(overrides?: CallOverrides): Promise<BigNumber>;

    destroyed(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    destroyedHit(overrides?: CallOverrides): Promise<BigNumber>;

    setFlags(
      _canTransferFlag: PromiseOrValue<boolean>,
      _revertFlag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFlagsByMethod(
      _canTransferFlag: PromiseOrValue<boolean>[],
      _canTransferKey: PromiseOrValue<BytesLike>[],
      _revertFlag: PromiseOrValue<boolean>[],
      _revertKey: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferred(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferredHit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    created(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createdHit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destroyed(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    destroyedHit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFlags(
      _canTransferFlag: PromiseOrValue<boolean>,
      _revertFlag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFlagsByMethod(
      _canTransferFlag: PromiseOrValue<boolean>[],
      _canTransferKey: PromiseOrValue<BytesLike>[],
      _revertFlag: PromiseOrValue<boolean>[],
      _revertKey: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferred(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferredHit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
