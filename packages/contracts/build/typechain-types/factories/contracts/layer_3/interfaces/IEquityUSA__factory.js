"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IEquityUSA__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bool",
                        name: "votingRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "informationRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "liquidationRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "subscriptionRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "conversionRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "redemptionRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "putRight",
                        type: "bool",
                    },
                    {
                        internalType: "enum IEquity.DividendType",
                        name: "dividendRight",
                        type: "uint8",
                    },
                    {
                        internalType: "bytes3",
                        name: "currency",
                        type: "bytes3",
                    },
                    {
                        internalType: "uint256",
                        name: "nominalValue",
                        type: "uint256",
                    },
                ],
                internalType: "struct IEquity.EquityDetailsData",
                name: "_equityDetailsData",
                type: "tuple",
            },
            {
                components: [
                    {
                        internalType: "enum RegulationType",
                        name: "regulationType",
                        type: "uint8",
                    },
                    {
                        internalType: "enum RegulationSubType",
                        name: "regulationSubType",
                        type: "uint8",
                    },
                    {
                        internalType: "uint256",
                        name: "dealSize",
                        type: "uint256",
                    },
                    {
                        internalType: "enum AccreditedInvestors",
                        name: "accreditedInvestors",
                        type: "uint8",
                    },
                    {
                        internalType: "uint256",
                        name: "maxNonAccreditedInvestors",
                        type: "uint256",
                    },
                    {
                        internalType: "enum ManualInvestorVerification",
                        name: "manualInvestorVerification",
                        type: "uint8",
                    },
                    {
                        internalType: "enum InternationalInvestors",
                        name: "internationalInvestors",
                        type: "uint8",
                    },
                    {
                        internalType: "enum ResaleHoldPeriod",
                        name: "resaleHoldPeriod",
                        type: "uint8",
                    },
                ],
                internalType: "struct RegulationData",
                name: "_regulationData",
                type: "tuple",
            },
            {
                components: [
                    {
                        internalType: "bool",
                        name: "countriesControlListType",
                        type: "bool",
                    },
                    {
                        internalType: "string",
                        name: "listOfCountries",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "info",
                        type: "string",
                    },
                ],
                internalType: "struct AdditionalSecurityData",
                name: "_additionalSecurityData",
                type: "tuple",
            },
        ],
        name: "_initialize_equityUSA",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_dividendID",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_pageIndex",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_pageLength",
                type: "uint256",
            },
        ],
        name: "getDividendHolders",
        outputs: [
            {
                internalType: "address[]",
                name: "holders_",
                type: "address[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_dividendID",
                type: "uint256",
            },
        ],
        name: "getDividends",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "uint256",
                                name: "recordDate",
                                type: "uint256",
                            },
                            {
                                internalType: "uint256",
                                name: "executionDate",
                                type: "uint256",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct IEquity.Dividend",
                        name: "dividend",
                        type: "tuple",
                    },
                    {
                        internalType: "uint256",
                        name: "snapshotId",
                        type: "uint256",
                    },
                ],
                internalType: "struct IEquity.RegisteredDividend",
                name: "registeredDividend_",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getDividendsCount",
        outputs: [
            {
                internalType: "uint256",
                name: "dividendCount_",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_dividendID",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "_account",
                type: "address",
            },
        ],
        name: "getDividendsFor",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "tokenBalance",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "recordDate",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "executionDate",
                        type: "uint256",
                    },
                    {
                        internalType: "uint8",
                        name: "decimals",
                        type: "uint8",
                    },
                    {
                        internalType: "bool",
                        name: "recordDateReached",
                        type: "bool",
                    },
                ],
                internalType: "struct IEquity.DividendFor",
                name: "dividendFor_",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getEquityDetails",
        outputs: [
            {
                components: [
                    {
                        internalType: "bool",
                        name: "votingRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "informationRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "liquidationRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "subscriptionRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "conversionRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "redemptionRight",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "putRight",
                        type: "bool",
                    },
                    {
                        internalType: "enum IEquity.DividendType",
                        name: "dividendRight",
                        type: "uint8",
                    },
                    {
                        internalType: "bytes3",
                        name: "currency",
                        type: "bytes3",
                    },
                    {
                        internalType: "uint256",
                        name: "nominalValue",
                        type: "uint256",
                    },
                ],
                internalType: "struct IEquity.EquityDetailsData",
                name: "equityDetailsData_",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_balanceAdjustmentID",
                type: "uint256",
            },
        ],
        name: "getScheduledBalanceAdjustment",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "executionDate",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "factor",
                        type: "uint256",
                    },
                    {
                        internalType: "uint8",
                        name: "decimals",
                        type: "uint8",
                    },
                ],
                internalType: "struct IEquity.ScheduledBalanceAdjustment",
                name: "balanceAdjustment_",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getScheduledBalanceAdjustmentCount",
        outputs: [
            {
                internalType: "uint256",
                name: "balanceAdjustmentCount_",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_pageIndex",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_pageLength",
                type: "uint256",
            },
        ],
        name: "getSecurityHolders",
        outputs: [
            {
                internalType: "address[]",
                name: "holders_",
                type: "address[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getSecurityRegulationData",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "enum RegulationType",
                                name: "regulationType",
                                type: "uint8",
                            },
                            {
                                internalType: "enum RegulationSubType",
                                name: "regulationSubType",
                                type: "uint8",
                            },
                            {
                                internalType: "uint256",
                                name: "dealSize",
                                type: "uint256",
                            },
                            {
                                internalType: "enum AccreditedInvestors",
                                name: "accreditedInvestors",
                                type: "uint8",
                            },
                            {
                                internalType: "uint256",
                                name: "maxNonAccreditedInvestors",
                                type: "uint256",
                            },
                            {
                                internalType: "enum ManualInvestorVerification",
                                name: "manualInvestorVerification",
                                type: "uint8",
                            },
                            {
                                internalType: "enum InternationalInvestors",
                                name: "internationalInvestors",
                                type: "uint8",
                            },
                            {
                                internalType: "enum ResaleHoldPeriod",
                                name: "resaleHoldPeriod",
                                type: "uint8",
                            },
                        ],
                        internalType: "struct RegulationData",
                        name: "regulationData",
                        type: "tuple",
                    },
                    {
                        components: [
                            {
                                internalType: "bool",
                                name: "countriesControlListType",
                                type: "bool",
                            },
                            {
                                internalType: "string",
                                name: "listOfCountries",
                                type: "string",
                            },
                            {
                                internalType: "string",
                                name: "info",
                                type: "string",
                            },
                        ],
                        internalType: "struct AdditionalSecurityData",
                        name: "additionalSecurityData",
                        type: "tuple",
                    },
                ],
                internalType: "struct ISecurity.SecurityRegulationData",
                name: "securityRegulationData_",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_dividendID",
                type: "uint256",
            },
        ],
        name: "getTotalDividendHolders",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getTotalSecurityHolders",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_voteID",
                type: "uint256",
            },
        ],
        name: "getTotalVotingHolders",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_voteID",
                type: "uint256",
            },
        ],
        name: "getVoting",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "uint256",
                                name: "recordDate",
                                type: "uint256",
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes",
                            },
                        ],
                        internalType: "struct IEquity.Voting",
                        name: "voting",
                        type: "tuple",
                    },
                    {
                        internalType: "uint256",
                        name: "snapshotId",
                        type: "uint256",
                    },
                ],
                internalType: "struct IEquity.RegisteredVoting",
                name: "registeredVoting_",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getVotingCount",
        outputs: [
            {
                internalType: "uint256",
                name: "votingCount_",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_voteID",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "_account",
                type: "address",
            },
        ],
        name: "getVotingFor",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "tokenBalance",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "recordDate",
                        type: "uint256",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                    {
                        internalType: "uint8",
                        name: "decimals",
                        type: "uint8",
                    },
                    {
                        internalType: "bool",
                        name: "recordDateReached",
                        type: "bool",
                    },
                ],
                internalType: "struct IEquity.VotingFor",
                name: "votingFor_",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_voteID",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_pageIndex",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_pageLength",
                type: "uint256",
            },
        ],
        name: "getVotingHolders",
        outputs: [
            {
                internalType: "address[]",
                name: "holders_",
                type: "address[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "recordDate",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "executionDate",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                ],
                internalType: "struct IEquity.Dividend",
                name: "_newDividend",
                type: "tuple",
            },
        ],
        name: "setDividends",
        outputs: [
            {
                internalType: "bool",
                name: "success_",
                type: "bool",
            },
            {
                internalType: "uint256",
                name: "dividendID_",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "executionDate",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "factor",
                        type: "uint256",
                    },
                    {
                        internalType: "uint8",
                        name: "decimals",
                        type: "uint8",
                    },
                ],
                internalType: "struct IEquity.ScheduledBalanceAdjustment",
                name: "_newBalanceAdjustment",
                type: "tuple",
            },
        ],
        name: "setScheduledBalanceAdjustment",
        outputs: [
            {
                internalType: "bool",
                name: "success_",
                type: "bool",
            },
            {
                internalType: "uint256",
                name: "balanceAdjustmentID_",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "recordDate",
                        type: "uint256",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct IEquity.Voting",
                name: "_newVoting",
                type: "tuple",
            },
        ],
        name: "setVoting",
        outputs: [
            {
                internalType: "bool",
                name: "success_",
                type: "bool",
            },
            {
                internalType: "uint256",
                name: "voteID_",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class IEquityUSA__factory {
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.IEquityUSA__factory = IEquityUSA__factory;
