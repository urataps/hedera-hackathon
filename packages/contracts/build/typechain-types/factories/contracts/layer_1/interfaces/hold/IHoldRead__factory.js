"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IHoldRead__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_tokenHolder",
                type: "address",
            },
        ],
        name: "getHeldAmountFor",
        outputs: [
            {
                internalType: "uint256",
                name: "amount_",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "_partition",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "_tokenHolder",
                type: "address",
            },
        ],
        name: "getHeldAmountForByPartition",
        outputs: [
            {
                internalType: "uint256",
                name: "amount_",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "_partition",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "_tokenHolder",
                type: "address",
            },
        ],
        name: "getHoldCountForByPartition",
        outputs: [
            {
                internalType: "uint256",
                name: "holdCount_",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "partition",
                        type: "bytes32",
                    },
                    {
                        internalType: "address",
                        name: "tokenHolder",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "holdId",
                        type: "uint256",
                    },
                ],
                internalType: "struct HoldIdentifier",
                name: "_holdIdentifier",
                type: "tuple",
            },
        ],
        name: "getHoldForByPartition",
        outputs: [
            {
                internalType: "uint256",
                name: "amount_",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "expirationTimestamp_",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "escrow_",
                type: "address",
            },
            {
                internalType: "address",
                name: "destination_",
                type: "address",
            },
            {
                internalType: "bytes",
                name: "data_",
                type: "bytes",
            },
            {
                internalType: "bytes",
                name: "operatorData_",
                type: "bytes",
            },
            {
                internalType: "enum ThirdPartyType",
                name: "thirdPartyType_",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "partition",
                        type: "bytes32",
                    },
                    {
                        internalType: "address",
                        name: "tokenHolder",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "holdId",
                        type: "uint256",
                    },
                ],
                internalType: "struct HoldIdentifier",
                name: "_holdIdentifier",
                type: "tuple",
            },
        ],
        name: "getHoldThirdParty",
        outputs: [
            {
                internalType: "address",
                name: "thirdParty_",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "_partition",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "_tokenHolder",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_pageIndex",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_pageLength",
                type: "uint256",
            },
        ],
        name: "getHoldsIdForByPartition",
        outputs: [
            {
                internalType: "uint256[]",
                name: "holdsId_",
                type: "uint256[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
class IHoldRead__factory {
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.IHoldRead__factory = IHoldRead__factory;
